----QUIT----2019-08-13T18:16:10.85892+02:00 Pharo7.0.4-0-32bit-ccd1f64.image priorSource: 0!----QUIT----2019-08-13T18:16:24.267614+02:00 Pharo7.0.4-0-32bit-ccd1f64.image priorSource: 0!ButtonPresenter subclass: #MyButtonPresenter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!MyButtonPresenter methodsFor: 'Morphic-Base-Widgets'!heightToDisplayInList: aList
self haltOnce.
	^200! !ListPresenter subclass: #RobotListPresenter
	instanceVariableNames: 'list'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!RobotListPresenter methodsFor: 'initialization'!title 
	^'Robots'! !!RobotListPresenter methodsFor: 'initialization' stamp: 'BenComan 12/28/2019 01:37'!defaultColor
	^ Color green! !!RobotListPresenter methodsFor: 'initialization'!defaultWindowModelClass
	^ TickingWindowPresenter
! !Morph subclass: #RobotManualControlMorph
	instanceVariableNames: 'upButton downButton leftButton rightButton enabledCheckbox robot ghostCheckbox ghost'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 02:31'!ghost
	^ghost ifNil: [ ghost := false ].! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 03:01'!pressedUp
	self owner move: RobotNorth soleInstance silently: self ghost.! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 00:26'!toggleSelected
	self inform: 'KeyControlMorph>>#toggleSeelcted'! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 03:00'!pressedRight
	self owner move: RobotEast soleInstance silently: self ghost.! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 11:54'!keyControlEnabled: aFalse 
! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 02:31'!ghost: aBoolean 
	ghost := aBoolean! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 11:31'!keyControlEnabled
	^true! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 03:00'!pressedLeft
	self owner move: RobotWest soleInstance silently: self ghost.! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 00:26'!buttonMouseDown: aMouseButtonEvent 
	self inform: 'KeyControlMorph>>#buttonMouseDown:'! !!RobotManualControlMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 03:00'!pressedDown
	self owner move: RobotSouth soleInstance silently: self ghost.! !!RobotManualControlMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:05'!initializeLayout
	"self new openInWorld"
	
	| checkBoxWidth |
	self extent: (4 * self buttonSize) @ (2 * self buttonSize).
	
	upButton := IconicButton new
		target: self;
"		label: 'W';"
		actionSelector: #pressedUp;
		extent: self buttonSize @ self buttonSize.
	upButton	graphicalMorph: ((Smalltalk ui icons iconNamed: #up) asMorph center: upButton center).


	downButton := 	IconicButton new
		target: self;
"		label: 'S';"
		actionSelector: #pressedDown;
		extent: self buttonSize @ self buttonSize.
	downButton	graphicalMorph: ((Smalltalk ui icons iconNamed: #down) asMorph center: downButton center).

	leftButton := 	IconicButton new
		target: self;
"		label: 'A';"
		actionSelector: #pressedLeft;
		extent: self buttonSize @ self buttonSize.
	leftButton	graphicalMorph: ((Smalltalk ui icons iconNamed: #back) asMorph center: leftButton center).
		

	rightButton := 	IconicButton new
		target: self;
"		label: 'D';"
		actionSelector: #pressedRight;
		extent: self buttonSize @ self buttonSize.
	rightButton	graphicalMorph: ((Smalltalk ui icons iconNamed: #forward) asMorph center: rightButton center).
		
	ghostCheckbox := (CheckboxMorph on: self selected: #ghost changeSelected: #ghost:) 
		label: 'Ghost' ; vResizing: #rigid; height: self buttonSize; width: 3 * self buttonSize.

	
"	enabledCheckbox := (CheckboxButtonMorph new
		target: self;
		actionSelector: #toggleSelected;
		vResizing: #shrinkWrap;
		hResizing: #shrinkWrap)
		on: #mouseDown send: #buttonMouseDown: to: self.
"	
	self addMorph: (upButton        position: (1 @ 0) * self buttonSize).
	self addMorph: (leftButton      position: (0 @ 1) * self buttonSize).
	self addMorph: (downButton      position: (1 @ 1) * self buttonSize).
	self addMorph: (rightButton     position: (2 @ 1) * self buttonSize).
	self addMorph: (ghostCheckbox   position: (0 @ 2) * self buttonSize).
"	self addMorph: (enabledCheckbox center: (2.5 @ 0.5 ) * self buttonSize).
"		
	
! !!RobotManualControlMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 00:56'!initialize
	super initialize.
	self initializeLayout.! !!RobotManualControlMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 01:17'!defaultColor 
	^ Color veryLightGray.! !!RobotManualControlMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 00:32'!buttonSize
	^20

	
! !Morph subclass: #RobotMorph
	instanceVariableNames: 'robot idLabel nameLabel mindDropList energyLabel locationLabel ghostCheckbox debugCheckbox mindClassIndex idFont keyControl'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!RobotMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 00:35'!initializeLayoutCopy
	|c1 r1 r2 c2 c3|
	self extent: (2 * self columnWidth)@(3 * self rowHeight). 
	self color: self defaultColor.

	idLabel := StringMorph new vResizing: #rigid; hResizing: #rigid; height: self rowHeight; font: (LogicalFont familyName: SourceCodeFonts defaultFontName pointSize: 12) emphasis: 1; backgroundColor: Color green; cellPositioning: #topCenter.
	nameLabel := StringMorph new vResizing: #rigid; height: self rowHeight; emphasis: 1.
	mindDropList := DropListMorph new.
	mindDropList
		on: self 
		list: #mindDropListItems
		selected: #mindDropListIndex
		changeSelected: #mindDropListIndex: ;
		listPaneColor: Color veryLightGray;
		color: Color veryLightGray;
	 	updateContentColor: Color veryLightGray;
   		selectionColor: Color veryLightGray;
    	adoptPaneColor: Color veryLightGray;
		height: self rowHeight + 1.
	energyLabel := StringMorph new vResizing: #rigid; height: self rowHeight; width: self columnWidth.
	locationLabel := StringMorph new vResizing: #rigid; height: self rowHeight; width: self columnWidth.
	ghostCheckbox := (CheckboxMorph on: robot selected: #ghost changeSelected: #ghost:) 
		label: 'Ghost' ; vResizing: #rigid; height: self rowHeight; width: self columnWidth. 
	debugCheckbox := (CheckboxMorph on: robot selected: #debug changeSelected: #debug:) 
		label: 'Debug' ; vResizing: #rigid; height: self rowHeight; width: self columnWidth.	

	r1 := AlignmentMorph newRow color: self defaultColor; cellPositioning: #topLeft.
	r1 addMorphBack: idLabel.
	r1 addMorphBack: mindDropList.
	
	c1 := AlignmentMorph newColumn color: self defaultColor; cellPositioning: #topLeft.
	c1 addMorphBack: energyLabel. 
	c1 addMorphBack: locationLabel.
	
	c2 := AlignmentMorph newColumn color: self defaultColor; cellPositioning: #topLeft; width: self columnWidth; hResizing: #rigid.
	c2 addMorphBack: ghostCheckbox.
	c2 addMorphBack: debugCheckbox.
	
	r2 := AlignmentMorph newRow color: self defaultColor; cellPositioning: #topLeft.
	r2 addMorphBack: c1.
	r2 addMorphBack: c2.
	
	c3 := AlignmentMorph newColumn color: self defaultColor; cellPositioning: #topLeft.
	c3 addMorphBack: r1.
	c3 addMorphBack: r2.
	c3 addMorphBack: (LineMorph from: 0@0 to: (self width)@0 color: Color black width: 1).

	self addMorph: c3.
	
! !!RobotMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:07'!initializeLayout
	"|r1| r1 := (Robot new initializeId: $A map: nil location: 2@2 mindClass: BestNeighborMind) 
				energy: 88888; location: 888@888. 
	(RobotMorph on: r1) openInWindow."
	|x0 x1 x2 x3 y0 y1 y2 y3 y4 checkBoxWidth idLabelWidth y5 |

	keyControl := RobotManualControlMorph new.

	idLabelWidth:=17.
	checkBoxWidth := 80.
	
	x0:=5.
	x1:=x0 + idLabelWidth.
	x2:=x0 + self columnWidth + 10.
	x3:=x2 + checkBoxWidth. 
	
	y0:=5.
	y1:=y0 + self rowHeight + 4.
	y2:=y1 + self rowHeight.
	y3:=y2 + self rowHeight.
	y4:=y3 + self rowHeight + 5.
	y5:=y4 + 5.

	
	idLabel := StringMorph new vResizing: #rigid; hResizing: #rigid; height: self rowHeight; font: (LogicalFont familyName: SourceCodeFonts defaultFontName pointSize: 12) emphasis: 1; backgroundColor: Color green; cellPositioning: #topCenter.
	
	nameLabel := StringMorph new vResizing: #rigid; height: self rowHeight; emphasis: 1.
	
	mindDropList := DropListMorph new.
	mindDropList
		on: self 
		list: #mindDropListItems
		selected: #mindDropListIndex
		changeSelected: #mindDropListIndex: ;
		listPaneColor: Color veryLightGray;
		color: Color veryLightGray;
	 	updateContentColor: Color veryLightGray;
   		selectionColor: Color veryLightGray;
    	adoptPaneColor: Color veryLightGray;
		height: self rowHeight + 1;
		width: x3 - x1.
		
	energyLabel := StringMorph new vResizing: #rigid; height: self rowHeight; width: self columnWidth.
	
	locationLabel := StringMorph new vResizing: #rigid; height: self rowHeight; width: self columnWidth.
	
"	ghostCheckbox := (CheckboxMorph on: robot selected: #ghost changeSelected: #ghost:) 
		label: 'Ghost' ; vResizing: #rigid; height: self rowHeight; width: checkBoxWidth. 
"		
	debugCheckbox := (CheckboxMorph on: robot selected: #debug changeSelected: #debug:) 
		label: 'Debug' ; vResizing: #rigid; height: self rowHeight; width: checkBoxWidth.	
	

	self extent: (x3 + keyControl width) @ (y3 + 5). 
	self addMorph: (idLabel       position: x0@y0).
	self addMorph: (mindDropList  position: x1@y0). 
	self addMorph: (energyLabel   position: x0@y1).
	self addMorph: (locationLabel position: x0@y2).
	self addMorph: (debugCheckbox position: x0@y3).
"	self addMorph: (ghostCheckbox position: x2@y1).
"	self addMorph: (keyControl    position: x2@y1).	
	self addMorph: (LineMorph from: 0@y4 to: (self width)@y4 color: Color black width: 1).
	self color: self defaultColor.
! !!RobotMorph methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 22:47'!robot: anObject
	robot := anObject! !!RobotMorph methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 22:47'!robot
	^ robot! !!RobotMorph methodsFor: 'accessing' stamp: 'BenComan 12/30/2019 02:54'!adoptPaneColor: paneColor
	super adoptPaneColor: paneColor  ! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 00:34'!mindDropListIndex: anInteger 
	mindClassIndex := anInteger.
	robot mindClass: (mindDropList list at: mindClassIndex)! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 00:19'!mindDropListItems
	^ RobotMind allSubclasses ! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 01:30'!manualMoveLeft
	robot move: RobotWest soleInstance silently: ghostCheckbox enabled.! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 02:59'!move: aRobotDirection silently: aBoolean 
	robot move: aRobotDirection silently: aBoolean! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 00:19'!mindDropListIndex
	^ mindDropList list indexOf: robot mindClass.
! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 22:47'!defaultColor 
	^Color veryLightGray ! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 01:05'!columnWidth 
	^100! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 22:47'!robotEnergy
	^ robot 
		ifNil: [ 'nil' ]
		ifNotNil: [ robot energy printString ]! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 01:23'!moveLeft
	self shouldBeImplemented.! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 01:13'!idFont
	^ idFont ifNil: [ 
		idFont := LogicalFont familyName: SourceCodeFonts defaultFontName pointSize: 6 ]! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 22:47'!rowHeight 
	^20! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 01:25'!update
	idLabel contents: robot id asString, ':'.
	nameLabel contents: robot id asString, ': ', robot mindClass name.
	energyLabel 	contents: 'Energy: ' , self robotEnergy.
	locationLabel contents: 'Location: ' , self robotLocation.
	
	"checkboxes do their own update"! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 01:03'!robotLocation
	^ robot 
		ifNil: [ 'nil' ]
		ifNotNil: [ (robot location x printString), '@', (robot location y printString)]! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 22:47'!initializeOn: aRobot 
	robot := aRobot.
	super initialize.
	self initializeLayout.
	self update.

	! !!RobotMorph methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 23:38'!mindDropList
	^ mindDropList! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotMorph class
	instanceVariableNames: ''!!RobotMorph class methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 22:47'!on: aRobot 
	^ self new initializeOn: aRobot! !Morph subclass: #RobotWorldMorph
	instanceVariableNames: 'map singleStep ghostKeys cellFont cellInfoMorph transformedPointer robotFont'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!RobotWorldMorph methodsFor: 'stepping'!singleStep
	map ifNotNil: [ map step: 0.1s ].! !!RobotWorldMorph methodsFor: 'stepping'!stepTime 
	^ 200 "milliseconds"! !!RobotWorldMorph methodsFor: 'stepping'!wantsSteps 
	^true! !!RobotWorldMorph methodsFor: 'layout'!positionOfCell: aMapCellMorph
	^ ((aMapCellMorph location - 1) * (self cellSize + self cellInset)) + self cellInset + self position + self mapInset.
	! !!RobotWorldMorph methodsFor: 'layout'!cellLocationOfWorldPosition: position
	^ ((position - self position - self mapInset) // self cellSize) + 1
	! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:29'!drawEnergyCell: energyCell on: aCanvas
	| outerOrigin outerBox center stringOrigin energyString stringWidth stringHeight borderColor |

	borderColor := Color black.
	outerOrigin := self position + ((energyCell location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: energyCell energyColor
		borderWidth: self cellInset
		borderColor: borderColor.

	center := outerBox center.
	energyString := energyCell energy abs printString.
	stringHeight := self cellFont height.
	stringWidth := self cellFont widthOfString: energyString.
	stringOrigin := (center x - (stringWidth // 2) + 1) @ (center y - (stringHeight // 2)).
	aCanvas 
		drawString: energyString
		from: 1 
		to: energyString size
		at: stringOrigin 
		font: self cellFont 
		color: Color black! !!RobotWorldMorph methodsFor: 'initialization'!keyStroke: evt 
	map stepKey: evt keyCharacter silently: ghostKeys = true.! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:15'!mouseLeave: evt
	transformedPointer := 0@0. 
"   evt hand releaseKeyboardFocus: self 
"! !!RobotWorldMorph methodsFor: 'initialization'!cellSize
	^14! !!RobotWorldMorph methodsFor: 'initialization'!cellFont
	^ cellFont ifNil: [ cellFont := 
			LogicalFont familyName: SourceCodeFonts defaultFontName pointSize: 6 ]! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:30'!drawWarpCell: cell on: aCanvas
	|  outerOrigin outerBox borderColor |

	borderColor := Color black.
	outerOrigin := self position + ((cell location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: Color white
		borderWidth: 2
		borderColor: borderColor.
! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:27'!drawDeathCell: cell on: aCanvas
	|  outerOrigin outerBox borderColor |

	borderColor := Color black.
	outerOrigin := self position + ((cell location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: Color white
		borderWidth: self cellInset
		borderColor: borderColor.

	aCanvas
		line: outerBox topLeft to: outerBox bottomRight width: 1 color: Color black;
		line: outerBox topRight to: outerBox bottomLeft width: 1 color: Color black
! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/30/2019 11:00'!drawStartCell: cell on: aCanvas
	| outerOrigin outerBox center borderColor innerBox|
	borderColor := Color black.
	outerOrigin := self position + ((cell location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: Color green
		borderWidth: self cellInset
		borderColor: borderColor.

	center := outerBox center.
	aCanvas 
		fillOval: (Rectangle origin: (center - (2@2)) extent: 5@5)
		color: Color green 
		borderWidth: 0 
		borderColor: Color green.

	innerBox := Rectangle origin: (center - (2@2)) extent: 5@5.
	aCanvas 
		frameAndFillRectangle: innerBox 
		fillColor: Color black
		borderWidth: 0
		borderColor: Color black.! !!RobotWorldMorph methodsFor: 'initialization'!ghostKeys: aBoolean
	ghostKeys := aBoolean = true.
	ghostKeys 
		ifTrue:  [ self inform: 'Click on map to NAVIGATE using keys W,A,S,D' ]
		ifFalse: [ self inform: 'Click on map to GHOST NAVIGATE using keys W,A,S,D' ]
! !!RobotWorldMorph methodsFor: 'initialization'!mapInset
	^ 20! !!RobotWorldMorph methodsFor: 'initialization'!initializeMap: aMap
	map := aMap.
	self 
		extent: (map extent * self cellSize) + (2 * self mapInset);
		color: Color black;
		borderColor: Color white.! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:09'!handlesKeyboard: evt

  ^ false.! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:15'!mouseEnter: evt
"	evt hand newKeyboardFocus: self. 
"! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:15'!keyboardFocusChange: aBoolean 

"	aBoolean 
		ifTrue: [ self inform: 'Got Keyboard Focus - Navigate with keys W,A,S,D' ]
		ifFalse: [ self inform: 'Lost Keyboard Focus']
"! !!RobotWorldMorph methodsFor: 'initialization'!drawOn: aCanvas
	super drawOn: aCanvas.
	map cellsDo: [ :cell | cell visit: self drawOn: aCanvas ].
	map robotsDo: [ :robot | robot visit: self drawOn: aCanvas ].! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:16'!step 
	| location cell |
	self invalidRect: self fullBounds.
	
	"Display cell info"
	location := self cellLocationOfWorldPosition: transformedPointer.
	(location between: 1@1 and: map extent) ifFalse: 
		[ 	cellInfoMorph visible: false.
			^self 
		].
	cell := map cellAt: location.
	cellInfoMorph contents: cell info.
	cellInfoMorph position: transformedPointer + self owner position + (10@10).
	cellInfoMorph setProperty: #morphicLayerNumber toValue: 5.
	cellInfoMorph visible: true.
! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:00'!drawRobot: robot on: aCanvas
	| outerOrigin outerBox innerBox center borderColor fillColor textColor displayString stringHeight stringWidth stringOrigin |

	borderColor := Color black.
	fillColor := robot isDead ifTrue: [ Color black ] ifFalse: [ Color green ].
	textColor := robot isDead ifTrue: [ Color white ] ifFalse: [ Color black ].
	outerOrigin := self position + ((robot location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: fillColor
		borderWidth: self cellInset
		borderColor: borderColor.

	center := outerBox center.
	innerBox := Rectangle origin: (center - (2@2)) extent: 5@5.
		
	displayString := robot id asString.
	stringHeight := self robotFont height.
	stringWidth := self robotFont widthOfString: displayString.
	stringOrigin := (center x - (stringWidth // 2) + 1) @ (center y - (stringHeight // 2) + 1).
	aCanvas 
		drawString: displayString
		from: 1 
		to: displayString size
		at: stringOrigin 
		font: self robotFont 
		color: textColor
		
! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:28'!drawJumpCell: cell on: aCanvas
	|  outerOrigin outerBox borderColor |

	borderColor := Color black.
	outerOrigin := self position + ((cell location - 1) * self cellSize) + self mapInset.
	outerBox := outerOrigin extent: (self cellSize @ self cellSize).
	aCanvas
		frameAndFillRectangle: outerBox 
		fillColor: Color white
		borderWidth: self cellInset
		borderColor: borderColor.

	aCanvas		
		line: outerBox topCenter to: outerBox bottomLeft width: 2  color: borderColor;
		line: outerBox bottomLeft to: outerBox bottomRight width: 2  color: borderColor;
		line: outerBox bottomRight to: outerBox topCenter width: 2  color: borderColor.
! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:14'!handlesMouseOver: evt
	^true
! !!RobotWorldMorph methodsFor: 'initialization'!cellInset
	^1! !!RobotWorldMorph methodsFor: 'initialization'!handleMouseOver: evt
	"Record cell info position for use by #step method"
	transformedPointer := evt position.

	super handleMouseOver: evt	
! !!RobotWorldMorph methodsFor: 'initialization'!defaultBorderWidth
	^ self cellInset! !!RobotWorldMorph methodsFor: 'initialization'!robotFont
	^ robotFont ifNil: [ robotFont := 
			LogicalFont familyName: SourceCodeFonts defaultFontName pointSize: 8 ]! !!RobotWorldMorph methodsFor: 'initialization' stamp: 'BenComan 12/30/2019 02:47'!initialize
	super initialize.
	cellInfoMorph := 
		StringMorph new
			contents: 'XXX';
			backgroundColor: Color yellow;
			lock: true;
			visible: false;
			setProperty: #morphicLayerNumber toValue: 5.
"	self addMorph: cellInfoMorph."
	cellInfoMorph openInWorld.
	transformedPointer := 0@0.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotWorldMorph class
	instanceVariableNames: ''!!RobotWorldMorph class methodsFor: 'as yet unclassified'!newWith: aMap 
	^self new initializeMap: aMap ! !!RobotWorldMorph class methodsFor: 'as yet unclassified'!sample 
	<example>
	self new openInWindow! !ComposablePresenter subclass: #RobotWorldUI
	instanceVariableNames: 'game map mapLabel mapDropList mindLabel mindDropList startButton stopButton backButton stepButton stepDebugButton historyButton resetButton debugCheckbox keyboardLiveCheckbox fileOutButton browseButton energyField timeField cellField mapScroller scrollPane mapMorph spacer mapHistory ghostCheckbox debugRealTimeStart debugRealTimeStarted robotList robotListMorph'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-UI'!!RobotWorldUI methodsFor: 'action' stamp: 'BenComan 12/29/2019 10:51'!pressedBack
	|previousStep|
	mapHistory isEmpty ifTrue: [ ^ self ].
	previousStep := mapHistory pop. "discard current" 
	map restore: previousStep map.
	self updateRobotList ! !!RobotWorldUI methodsFor: 'action'!okToChange
	map terminate.
	^true! !!RobotWorldUI methodsFor: 'accessing'!browseButton: anObject
	browseButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!title
	^'JRMPC Organiser'! !!RobotWorldUI methodsFor: 'accessing'!ghostCheckbox
	^ ghostCheckbox! !!RobotWorldUI methodsFor: 'accessing'!stopButton: anObject
	stopButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!fileOutButton: anObject
	fileOutButton := anObject! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 10:56'!mindDropList
	^ mindDropList! !!RobotWorldUI methodsFor: 'accessing'!spacer: anObject
	spacer := anObject! !!RobotWorldUI methodsFor: 'accessing'!step
	robotListMorph submorphs do: [ :robotMorph | robotMorph update ].
	timeField label: 'Time: ', map time printString, ' / ', map endTime printString.! !!RobotWorldUI methodsFor: 'accessing'!stepButton
	^ stepButton! !!RobotWorldUI methodsFor: 'accessing'!robotList: anObject
	robotList := anObject! !!RobotWorldUI methodsFor: 'accessing'!ghostCheckbox: anObject
	ghostCheckbox := anObject! !!RobotWorldUI methodsFor: 'accessing'!defaultWindowModelClass

	^ TickingWindowPresenter! !!RobotWorldUI methodsFor: 'accessing'!debugCheckbox
	^ debugCheckbox! !!RobotWorldUI methodsFor: 'accessing'!stopButton
	^ stopButton! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/30/2019 00:37'!updateRobotList
	robotListMorph removeAllMorphs.
	map robots do: [:robot| robotListMorph addMorphBack: (RobotMorph on: robot)]. 
! !!RobotWorldUI methodsFor: 'accessing'!timeField
	^ timeField! !!RobotWorldUI methodsFor: 'accessing'!backButton: anObject
	backButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!mapDropList
	^ mapDropList! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:34'!energyField
	^ energyField! !!RobotWorldUI methodsFor: 'accessing'!fileOutButton
	^ fileOutButton! !!RobotWorldUI methodsFor: 'accessing'!pressedStart
	map start! !!RobotWorldUI methodsFor: 'accessing'!keyboardLiveCheckbox: anObject
	keyboardLiveCheckbox := anObject! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 10:57'!mindLabel
	^ mindLabel! !!RobotWorldUI methodsFor: 'accessing'!stepDebugButton: anObject
	stepDebugButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!pressedStop
	map stop.
! !!RobotWorldUI methodsFor: 'accessing'!startButton
	^ startButton! !!RobotWorldUI methodsFor: 'accessing'!mapLabel: anObject
	mapLabel := anObject! !!RobotWorldUI methodsFor: 'accessing'!backButton
	^ backButton! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 10:57'!mindDropList: anObject
	mindDropList := anObject! !!RobotWorldUI methodsFor: 'accessing'!resetButton
	^ resetButton! !!RobotWorldUI methodsFor: 'accessing'!updatePresenter
	self inform: 'UPDATE'! !!RobotWorldUI methodsFor: 'accessing'!timeField: anObject
	timeField := anObject! !!RobotWorldUI methodsFor: 'accessing'!stepDebugButton
	^ stepDebugButton! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 10:55'!reset
	map ifNotNil: [ map terminate ].
	map := mapDropList selectedItem copy.
	map configureRobots: mindDropList selectedItem. 
	self updateRobotList.
	map announcer when: RobotMapStep send: #stepped: to: self.
	mapHistory := Stack new.
	self mapScrollerSetTarget: map.

! !!RobotWorldUI methodsFor: 'accessing'!browseButton
	^ browseButton! !!RobotWorldUI methodsFor: 'accessing'!debugCheckbox: anObject
	debugCheckbox := anObject! !!RobotWorldUI methodsFor: 'accessing'!mapLabel
	^ mapLabel! !!RobotWorldUI methodsFor: 'accessing'!resetButton: anObject
	resetButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!mapDropList: anObject
	mapDropList := anObject! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 16:43'!stepped: aMapStep
	"SystemNavigation new browseAllCallsOnClass: mapStepped"
	mapHistory push: aMapStep.
	self step.

! !!RobotWorldUI methodsFor: 'accessing'!mapScroller: anObject
	mapScroller := anObject! !!RobotWorldUI methodsFor: 'accessing'!startButton: anObject
	startButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!stepButton: anObject
	stepButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!robotList
	^ robotList! !!RobotWorldUI methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 10:57'!mindLabel: anObject
	mindLabel := anObject! !!RobotWorldUI methodsFor: 'accessing'!mapScrollerSetTarget: aMap
	map := aMap.	
	mapMorph := map asMorph.
	mapMorph ghostKeys: ghostCheckbox state.
	scrollPane scrollTarget: mapMorph.
! !!RobotWorldUI methodsFor: 'accessing'!mapScroller
	^ mapScroller! !!RobotWorldUI methodsFor: 'accessing'!historyButton: anObject
	historyButton := anObject! !!RobotWorldUI methodsFor: 'accessing'!keyboardLiveCheckbox
	^ keyboardLiveCheckbox! !!RobotWorldUI methodsFor: 'accessing'!historyButton
	^ historyButton! !!RobotWorldUI methodsFor: 'accessing'!spacer
	^ spacer! !!RobotWorldUI methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:17'!initializePresenter
	startButton action: [ self pressedStart ].
	stopButton action:  [ self pressedStop  ].
	backButton action:  [ self pressedBack  ].
	stepButton action:  [ self pressedStep  ].
	historyButton action: [ mapHistory inspect ].
	resetButton action: [ self reset ].
	browseButton action: [ RobotMind browseHierarchy ].
	fileOutButton action: [ mindDropList selectedItem fileOut ].
   GTGenericStackDebugger alwaysOpenFullDebugger: true.
	self reset.
		
! !!RobotWorldUI methodsFor: 'initialization' stamp: 'BenComan 12/31/2019 03:18'!initializeWidgets
	"self new
		openWithSpec"
	self askOkToClose: true.

	mapHistory := Stack new.	

	robotListMorph := 	AlignmentMorph newColumn color: Color veryLightGray.
	robotList := robotListMorph asSpecAdapter. 
			
	scrollPane := GeneralScrollPane new scrollTarget: Morph new.
	scrollPane extent: 500@500. 
	scrollPane hResizing: #spaceFill ; vResizing: #spaceFill.
	mapScroller := scrollPane asSpecAdapter.
	
	mapLabel := self newLabel
		label: 'Map:'.		
	mapDropList := self newDropList
		items: RobotMap allMaps;
		whenSelectedItemChanged: [ :item | self reset ].

	mindLabel := self newLabel
		label: 'Mind:'.		
	mindDropList := self newDropList
		items: RobotMind allSubclasses;
		whenSelectedItemChanged: [ :item | self reset ].
		
	spacer := self newLabel.
		
	startButton := self newButton
		label: 'Start';
		icon: (self iconNamed: #glamorousGo).
	
	stopButton := self newButton
		label: 'Stop';
		icon: (self iconNamed: #stop).

	backButton := self newButton
		label: 'Back';
		icon: (self iconNamed: #back).

	stepButton := self newButton
		label: 'Step';
		icon: (self iconNamed: #glamorousInto).

	debugCheckbox := self newCheckBox
		label: 'Debug' ;
		state: false.

	"Robot can be manually moved into test positions with W,A,S,D keys"
	"but when robot is a ghost, the robot and map don't interact."
	ghostCheckbox := self newCheckBox
		label: 'Ghost' ; 
		state: false.    
	
	historyButton := self newButton
		label: 'History';
		icon: (self iconNamed: #history).
		
	resetButton := self newButton
		label: 'Reset';
		icon: (self iconNamed: #refresh).
		
	browseButton := self newButton
		label: 'Browse Minds';
		icon: (self iconNamed: #smallWindowIcon).

	fileOutButton := self newButton
		label: 'File Out';
		icon: (self iconNamed: #book).

	energyField := self newLabel
		label: 'Energy:'.
		
	timeField := self newLabel
		label: 'Time:'.
		
! !!RobotWorldUI methodsFor: 'initialization'!initialExtent 
	^950@900! !!RobotWorldUI methodsFor: 'as yet unclassified' stamp: 'BenComan 12/28/2019 18:41'!pressedStep
	map step.
"	robotList listItems do: [ :robotPresenter | robotPresenter updatePresenter ]."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotWorldUI class
	instanceVariableNames: ''!!RobotWorldUI class methodsFor: 'specs'!menuOn: aBuilder
	<worldMenu>
	(aBuilder item: #Robots)
		label: 'JRMPC';
		order: 0;
		withSeparatorAfter;
		with: [ (aBuilder item: #'Robots')
				order: 0;
				help: 'Open user interface';
				action: [ RobotWorldUI open ].
				]! !!RobotWorldUI class methodsFor: 'specs' stamp: 'BenComan 12/31/2019 03:19'!defaultSpec
	^SpecLayout composed 
		newColumn: [ :column | column 
			newRow: [ :row | row
				newColumn: [ :column2 | column2
					newRow: [ :row2 | row2
						add: #mapLabel width: 38;
						add: #mapDropList width: 250;
						addHSplitter
						] 
				] right: 0.6;
				newColumn: [ :column2 | column2
					newRow: [ :row2 | row2
						add: #spacer;
						add: #browseButton width: 120;
						addHSplitter
						 ]
				] right: 0.4
				]
			height: 25;
	
			newRow: [ :row | row 
				newColumn: [ :column2 | column2
					newRow: [ :row2 | row2
						add: #historyButton width: self buttonWidth;
						add: #resetButton width: self buttonWidth;
						add: #startButton width: self buttonWidth; 
						add: #stopButton width: self buttonWidth;
						add: #backButton width: self buttonWidth; 
						add: #stepButton width: self buttonWidth; 
						add: #timeField width: 2 * self buttonWidth;
						addHSplitter]
				] 
			] 
			height: 30;
		
			newRow: [ :row | row 
				newColumn: [ :column2 | column2
					newRow: [ :row2 | row2
						add: #mapScroller 
					] 
				];
				newColumn: [ :column2 | column2
					newRow: [ :row2 | row2
						add: #robotList
					] 
				] width: 200 
			]
		];
		yourself! !!RobotWorldUI class methodsFor: 'specs'!open
	<script>
	self new openWithSpec! !RobotMap subclass: #Phase1Samples
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Samples'!!Phase1Samples methodsFor: 'as yet unclassified'!see_class_side! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Phase1Samples class
	instanceVariableNames: ''!!Phase1Samples class methodsFor: 'as yet unclassified'!map6
	"self map6 asMorph openInWindow"
	^self new
		name: 'Map 6';
		extent: 50 @ 50;
		stepTime: 0.1s; "scaled decimal"
		endTime: 20;
		startLocation: 39@33;
		cells: #(
			#(14 11 28 26 15 18 18 10 10 28 20 20 14 15 10 20 11 21 11 20 26 26 24 12 29 15 11 17 26 27 29 22 15 13 14 22 26 27 10 29 17 16 13 26 21 20 13 11 11 26)
			#(12 27 27 15 15 13 24 17 28 28 24 23 23 23 17 18 24 13 23 18 23 23 28 18 11 17 29 20 25 22 18 29 11 22 12 11 15 28 18 12 23 26 13 29 11 18 18 29 17 25)
			#(19 23 12 10 20 20 28 12 24 24 15 22 19 23 20 21 18 23 10 28 17 19 28 23 25 18 21 21 27 13 12 22 11 16 19 18 18 20 27 25 12 19 12 28 25 27 23 29 12 15)
			#(25 14 15 25 20 12 12 22 15 22 14 28 16 15 16 22 15 20 25 20 14 20 21 11 21 16 13 27 25 18 21 17 12 27 14 25 22 18 10 27 20 26 21 29 28 23 19 25 27 25)
			#(16 23 17 13 23 23 29 21 26 22 29 13 15 22 22 12 25 22 27 16 19 16 21 15 13 10 24 14 24 10 17 29 23 28 23 12 27 29 20 29 15 26 23 21 29 23 28 28 26 28)
			#(29 28 12 22 27 14 23 12 26 28 20 17 13 23 12 24 24 11 12 10 11 27 20 13 18 27 11 13 17 11 15 27 12 15 11 29 18 18 26 11 13 28 15 29 15 22 16 18 26 21)
			#(10 10 23 10 22 15 24 26 20 18 25 14 20 14 13 27 14 27 16 23 28 15 16 12 10 20 11 17 23 12 11 23 23 10 20 24 16 19 20 12 25 18 20 14 22 26 11 29 20 18)
			#(21 24 17 25 11 22 12 25 11 27 13 14 20 26 23 18 16 10 13 23 10 19 11 18 23 25 9 10 10 10 10 10 9 19 28 11 16 29 11 16 19 28 11 22 18 27 28 20 18 24)
			#(29 27 11 26 26 16 19 20 18 16 12 22 23 28 11 29 10 25 15 10 13 21 16 11 10 12 13 14 14 15 14 14 13 12 10 12 23 17 23 15 13 10 12 25 26 25 20 12 29 13)
			#(10 26 13 15 28 29 27 23 16 25 20 18 21 28 12 21 13 14 24 20 28 13 10 12 14 16 18 19 20 20 20 19 18 16 14 12 10 25 11 13 22 19 22 25 19 11 15 18 21 22)
			#(14 21 25 20 16 10 15 16 19 15 16 20 14 23 11 18 15 29 20 24 10 10 13 16 18 21 23 25 26 27 26 25 23 21 18 16 13 10 19 20 14 24 18 14 26 26 29 19 18 15)
			#(10 19 19 20 19 11 12 23 29 12 17 13 26 29 29 22 19 25 26 20 10 13 17 20 24 27 30 33 34 35 34 33 30 27 24 20 17 13 10 28 11 28 22 11 28 25 13 20 13 23)
			#(28 14 25 25 29 22 20 15 18 20 14 27 24 28 20 12 13 22 11 10 13 17 21 25 30 34 38 41 43 43 43 41 38 34 30 25 21 17 13 10 23 17 17 18 12 13 15 28 26 11)
			#(14 11 24 20 28 14 23 23 29 75 75 75 20 20 27 29 21 12 24 12 16 20 25 31 36 41 46 49 52 53 52 49 46 41 36 31 25 20 16 12 10 13 17 26 21 24 18 10 13 23)
			#(20 26 24 26 15 26 13 14 75 75 3000 75 75 27 19 26 26 23 10 14 18 24 30 36 43 49 54 58 61 62 61 58 54 49 43 36 30 24 18 14 10 12 14 25 24 12 28 27 24 18)
			#(11 28 12 25 11 15 21 23 75 75 3000 75 75 11 16 17 20 16 12 16 21 27 34 41 49 56 62 67 70 71 70 67 62 56 49 41 34 27 21 16 12 10 12 13 15 20 13 21 24 15)
			#(18 18 23 24 18 23 21 22 14 75 75 75 28 26 22 21 21 9 13 18 23 30 38 46 54 62 69 74 77 78 77 74 69 62 54 46 38 30 23 18 13 9 28 26 20 15 27 18 29 19)
			#(18 21 17 19 27 29 15 25 17 19 15 14 24 25 27 18 11 10 14 19 25 33 41 49 58 67 74 80 83 84 83 80 74 67 58 49 41 33 25 19 14 10 19 28 17 26 25 27 17 17)
			#(14 17 18 15 22 21 10 24 25 13 23 19 28 16 20 15 24 10 14 20 26 34 43 52 61 70 77 83 87 88 87 83 77 70 61 52 43 34 26 20 14 10 13 27 29 14 12 19 21 16)
			#(24 16 19 15 24 12 20 28 11 28 22 26 10 20 12 18 26 10 15 20 27 35 43 53 62 71 78 84 88 89 88 84 78 71 62 53 43 35 27 20 15 10 16 18 24 23 19 15 18 24)
			#(11 26 13 13 22 28 29 21 25 25 10 13 24 28 18 13 28 10 14 20 26 34 43 52 61 70 77 83 87 88 87 83 77 70 61 52 43 34 26 20 14 10 21 26 24 13 27 14 16 23)
			#(28 14 11 21 11 21 11 13 25 18 24 21 19 28 11 20 23 10 14 19 25 33 41 49 58 67 74 80 83 84 83 80 74 67 58 49 41 33 25 19 14 10 24 28 24 14 13 10 12 11)
			#(11 23 17 20 22 19 26 26 26 25 12 12 16 28 17 17 27 9 13 18 23 30 38 46 54 62 69 74 77 78 77 74 69 62 54 46 38 30 23 18 13 9 24 22 17 29 22 23 25 19)
			#(27 23 27 28 19 23 23 13 16 26 22 14 11 28 16 25 14 19 12 16 21 27 34 41 49 56 62 67 70 71 70 67 62 56 49 41 34 27 21 16 12 29 18 17 24 26 14 14 19 10)
			#(25 25 24 10 24 26 16 24 18 18 14 18 10 27 14 10 17 24 10 14 18 24 30 36 43 49 54 58 61 62 61 58 54 49 43 36 30 24 18 14 10 10 24 20 19 23 10 22 19 13)
			#(21 18 16 20 20 18 15 21 21 11 24 29 10 19 20 10 21 10 23 12 16 20 25 31 36 41 46 49 52 53 52 49 46 41 36 31 25 20 16 12 10 25 26 13 27 16 25 24 12 17)
			#(15 20 16 12 25 21 22 10 24 13 29 27 11 16 27 28 18 28 16 10 13 17 21 25 30 34 38 41 43 43 43 41 38 34 30 25 21 17 13 10 21 14 21 25 11 22 20 23 22 19)
			#(10 15 18 19 29 19 19 26 27 18 17 17 26 23 27 19 14 14 22 12 10 13 17 20 24 27 30 33 34 35 34 33 30 27 24 20 17 13 10 12 28 11 21 29 18 22 17 11 26 26)
			#(12 19 24 27 16 28 24 23 19 15 19 15 21 26 17 11 11 26 27 26 11 10 13 16 18 21 23 25 26 27 26 25 23 21 18 16 13 10 27 21 10 12 26 15 29 12 12 22 25 22)
			#(15 11 14 28 13 22 22 14 27 27 15 24 13 12 17 27 24 14 12 14 26 15 10 12 14 16 18 19 20 20 20 19 18 16 14 12 10 27 26 15 17 28 12 18 11 22 18 10 17 18)
			#(29 28 17 13 22 25 22 11 18 26 23 17 26 19 28 16 17 22 10 29 10 16 29 25 10 12 13 14 14 15 14 14 13 12 10 15 25 22 10 22 26 23 23 27 16 15 12 28 26 28)
			#(11 22 22 27 13 28 28 24 13 20 15 17 28 21 10 13 11 19 26 19 23 17 23 23 21 25 9 10 10 10 10 10 9 17 10 11 11 26 22 19 23 15 27 28 17 18 29 10 18 21)
			#(25 20 14 26 15 11 20 19 23 27 19 12 13 20 25 26 17 29 22 26 17 26 21 21 10 10 19 29 16 25 18 17 10 23 25 18 25 11 0 17 11 14 21 10 11 22 17 23 17 20)
			#(18 13 21 23 19 24 10 12 19 20 19 15 28 23 14 15 21 10 11 20 19 15 25 10 19 12 12 25 23 27 29 22 15 17 14 12 26 13 25 24 16 20 26 18 28 21 24 16 28 14)
			#(29 28 28 29 11 29 23 18 15 12 17 12 23 28 20 18 21 23 26 26 20 14 25 21 19 29 26 18 15 14 17 9 12 14 14 14 12 9 21 26 15 10 20 19 14 20 13 26 14 16)
			#(26 10 20 25 21 20 15 19 23 25 15 25 26 22 14 13 14 22 29 12 19 13 14 16 21 15 17 28 12 25 11 16 21 24 25 24 21 16 11 22 28 16 19 19 26 27 25 12 10 23)
			#(13 28 29 13 10 17 22 17 24 29 23 19 14 26 29 27 17 23 23 17 18 12 24 23 15 20 29 20 25 11 18 25 33 38 40 38 33 25 18 11 20 20 23 24 18 27 20 22 20 28)
			#(12 29 22 27 13 17 21 24 22 23 29 16 29 17 25 16 17 22 20 20 18 24 11 19 11 16 25 21 9 16 25 36 46 54 57 54 46 36 25 16 9 21 28 27 15 21 24 26 19 25)
			#(22 25 24 25 13 27 15 16 28 14 12 28 15 24 26 19 16 28 21 13 24 23 14 20 14 18 20 12 12 21 33 46 60 70 73 70 60 46 33 21 12 18 15 15 16 18 29 23 20 20)
			#(26 27 23 10 23 20 22 11 29 16 20 27 19 16 23 27 20 15 16 16 19 27 26 20 22 17 12 17 14 24 38 54 70 81 85 81 70 54 38 24 14 23 22 27 24 28 21 14 11 13)
			#(18 13 20 24 22 16 12 27 28 25 25 22 24 26 29 13 15 12 19 18 26 22 19 18 21 16 28 23 14 25 40 57 73 85 90 85 73 57 40 25 14 24 26 18 15 16 23 16 20 16)
			#(14 29 29 15 25 17 13 27 27 29 22 11 20 13 18 22 23 11 12 11 24 21 20 14 21 16 21 16 14 24 38 54 70 81 85 81 70 54 38 24 14 17 27 16 10 20 15 24 24 10)
			#(18 28 15 27 27 29 10 28 23 14 26 27 10 16 26 24 19 20 15 14 12 16 20 12 10 22 17 12 12 21 33 46 60 70 73 70 60 46 33 21 12 24 24 10 29 14 11 24 29 16)
			#(27 13 12 25 10 19 29 25 20 27 25 11 10 21 28 26 22 18 17 15 20 26 11 26 28 14 28 19 9 16 25 36 46 54 57 54 46 36 25 16 9 14 24 23 21 27 20 19 29 22)
			#(26 29 26 13 26 15 13 12 19 28 24 25 25 12 10 15 12 14 28 27 22 27 27 26 14 24 25 20 29 11 18 25 33 38 40 38 33 25 18 11 10 23 17 29 16 17 14 20 25 24)
			#(20 15 23 29 21 27 23 27 17 15 13 22 12 11 15 21 26 14 14 15 15 21 26 23 27 17 11 25 25 10 11 16 21 24 25 24 21 16 11 13 15 18 29 18 19 13 21 16 11 21)
			#(12 29 15 20 26 15 19 28 27 26 16 28 25 21 16 24 10 16 17 28 10 10 15 17 29 14 29 10 28 27 28 9 12 14 14 14 12 9 25 14 25 16 16 11 10 25 16 12 25 26)
			#(29 17 10 27 15 18 29 19 13 14 22 16 24 18 20 28 29 16 17 13 18 18 29 19 25 20 26 20 27 21 13 13 18 14 20 20 20 14 19 29 10 21 25 12 15 23 18 15 10 29)
			#(25 26 13 25 21 22 12 10 28 11 12 28 27 26 15 20 24 25 19 21 12 27 17 27 14 11 27 11 20 18 29 22 25 22 13 28 26 25 26 21 22 27 24 25 28 18 26 16 12 19)
			#(21 11 15 27 15 14 23 21 16 19 28 29 13 10 26 29 19 11 18 14 16 18 18 21 28 11 15 16 21 18 23 14 17 23 22 21 13 17 16 23 21 13 22 28 17 18 28 10 11 28)
		);
		yourself! !!Phase1Samples class methodsFor: 'as yet unclassified'!map5
	"self map5 asMorph openInWindow"
	^self new
		name: 'Bap 5';
		extent: 50 @ 50;
		stepTime: 0.1s; "scaled decimal"
		endTime: 20;
		startLocation: 13@30;
		cells: #(
			#(13 14 13 12 12 13 8 7 10 7 14 9 7 11 11 6 11 11 11 6 10 7 9 10 14 7 14 9 5 7 14 9 5 5 6 10 7 8 5 10 11 7 12 11 7 11 12 14 6 10)
			#(14 13 6 11 6 13 8 14 11 12 6 12 13 7 14 11 6 10 6 11 5 14 7 13 14 11 0 0 0 0 0 0 0 14 14 12 9 14 9 6 5 9 7 12 9 10 10 13 10 13)
			#(6 11 6 13 9 13 5 8 9 10 10 11 11 12 7 9 10 14 14 13 11 10 5 9 7 0 0 0 0 0 0 0 0 0 14 5 10 6 13 11 7 6 10 9 5 10 14 5 9 7)
			#(6 10 12 7 14 13 14 8 5 9 11 12 14 13 9 14 7 8 9 10 13 13 7 0 0 0 0 0 0 0 0 0 0 0 0 0 6 7 14 8 5 11 11 14 10 10 13 8 11 5)
			#(10 7 12 13 5 10 5 12 7 11 10 14 7 14 8 5 8 9 12 5 9 12 11 0 0 0 0 0 0 0 0 0 0 0 0 0 6 12 6 7 5 8 5 9 7 9 11 11 14 8)
			#(11 14 5 14 12 14 10 11 12 14 5 6 5 13 11 5 9 7 14 9 9 12 0 0 0 0 0 0 30 34 30 0 0 0 0 0 0 9 8 9 12 9 13 6 12 6 5 8 8 12)
			#(8 8 14 13 9 14 14 11 6 5 7 8 6 12 7 8 11 7 8 8 14 0 0 0 0 0 26 50 73 82 73 50 26 0 0 0 0 0 7 14 14 14 9 12 8 10 7 9 9 5)
			#(7 10 5 11 12 10 10 7 8 6 12 11 7 5 6 12 7 12 13 11 10 0 0 0 0 0 50 93 136 154 136 93 50 0 0 0 0 0 8 5 5 8 12 13 9 5 14 6 13 12)
			#(12 13 11 11 13 9 7 7 9 10 5 13 10 7 10 11 10 8 12 13 8 0 0 0 0 30 73 136 198 225 198 136 73 30 0 0 0 0 7 12 11 10 11 12 9 10 5 6 12 13)
			#(7 7 7 8 14 8 5 11 14 5 14 14 13 5 12 9 6 14 6 8 14 0 0 0 0 34 82 154 225 255 225 154 82 34 0 0 0 0 12 5 11 7 9 10 6 5 6 6 14 11)
			#(12 8 8 13 8 13 9 10 13 7 10 11 9 12 11 8 6 9 5 7 10 0 0 0 0 30 73 136 198 225 198 136 73 30 0 0 0 0 6 5 14 11 9 12 12 12 8 8 11 14)
			#(6 11 11 8 7 6 9 9 11 11 6 7 5 9 10 12 6 9 6 8 7 0 0 0 0 0 50 93 136 154 136 93 50 0 0 0 0 0 13 6 9 7 14 14 12 12 8 11 9 12)
			#(11 14 6 14 10 11 11 11 6 5 11 12 13 6 12 5 9 5 13 7 12 0 0 0 0 0 26 50 73 82 73 50 26 0 0 0 0 0 8 9 7 13 6 12 11 8 6 7 13 14)
			#(8 6 13 7 7 5 11 8 6 10 7 10 14 11 9 9 12 6 13 10 6 8 0 0 0 0 0 0 30 34 30 0 0 0 0 0 0 13 6 12 7 6 6 6 5 10 7 8 9 5)
			#(6 11 8 14 14 8 12 14 8 8 7 12 11 14 11 14 10 10 7 9 6 14 7 0 0 0 0 0 0 0 0 0 0 0 0 0 14 10 6 11 14 9 14 12 9 8 8 12 7 12)
			#(10 8 13 7 9 5 5 12 6 12 6 8 9 9 11 7 7 6 6 7 14 8 14 0 0 0 0 0 0 0 0 0 0 0 0 0 9 7 9 14 5 14 13 13 5 14 12 10 6 14)
			#(5 14 11 9 8 9 12 6 5 5 9 6 14 6 10 8 11 8 6 6 8 5 6 9 13 0 0 0 0 0 0 0 0 0 8 11 6 12 5 11 14 8 13 6 11 14 8 10 5 8)
			#(11 12 12 8 5 13 9 14 14 9 9 13 7 9 9 6 5 7 12 14 9 6 13 9 7 10 0 0 0 0 0 0 0 7 9 7 14 12 5 9 7 14 9 9 9 6 13 11 14 5)
			#(10 12 7 13 8 9 8 6 10 7 8 14 8 13 13 11 8 14 9 12 13 14 7 12 13 10 7 10 12 10 9 13 5 6 13 8 6 6 11 9 13 8 6 12 5 11 10 5 8 13)
			#(10 12 7 12 5 12 9 13 5 10 13 10 12 5 11 12 8 14 5 13 5 8 12 10 12 13 11 14 14 12 12 7 7 10 8 5 12 11 12 9 5 14 11 14 14 13 8 7 12 5)
			#(13 6 14 14 10 12 13 9 11 6 14 5 7 8 7 5 9 13 11 7 12 14 12 12 13 14 11 7 9 12 7 10 11 13 7 5 12 12 14 14 14 10 12 7 12 7 10 7 12 5)
			#(12 6 14 8 14 7 8 11 11 5 6 10 14 16 14 10 6 4 5 6 6 6 5 4 5 12 12 7 12 10 6 9 11 13 12 8 5 14 13 6 9 6 9 8 9 14 10 5 9 10)
			#(13 11 6 9 7 6 6 7 13 5 10 17 24 26 24 17 10 5 9 10 11 10 9 7 5 10 6 12 12 13 11 6 10 12 14 7 13 7 6 8 6 10 10 10 12 13 8 5 14 7)
			#(6 8 8 9 6 14 8 5 13 7 14 24 35 36 32 40 14 20 20 7 8 7 5 11 8 5 14 7 5 5 5 5 11 13 14 6 5 13 8 5 14 12 13 10 9 5 12 6 14 12)
			#(13 5 13 11 6 11 12 13 9 8 16 26 36 35 35 35 40 40 20 14 16 14 10 6 11 7 4 6 5 11 9 11 5 10 14 9 7 9 13 9 14 14 8 8 10 5 9 14 5 14)
			#(14 5 9 8 6 5 7 8 13 7 14 24 32 36 35 35 35 40 20 20 20 20 17 10 5 9 5 10 13 14 9 7 14 11 5 14 7 13 6 12 5 13 14 6 8 14 8 5 8 6)
			#(14 9 13 7 13 13 11 7 12 5 10 17 30 26 24 40 35 35 35 32 20 20 24 14 7 10 6 11 8 5 11 7 13 11 6 10 12 14 9 11 8 5 8 6 10 9 12 6 5 6)
			#(13 9 10 5 6 11 12 11 9 12 6 10 30 16 14 10 35 35 35 36 40 20 26 16 8 11 6 6 8 7 9 13 13 14 6 7 8 5 14 7 10 10 8 14 10 14 5 14 6 6)
			#(8 9 6 8 5 7 13 10 5 7 9 5 30 8 7 5 7 35 35 35 36 20 20 14 7 10 6 13 13 5 8 7 13 8 5 6 8 10 9 8 7 14 5 13 14 7 9 7 9 7)
			#(10 5 8 6 13 8 5 6 7 12 11 8 0 11 5 9 5 10 35 35 40 20 20 10 5 9 5 8 8 8 6 13 8 14 8 11 8 6 10 5 13 14 13 9 10 7 7 6 12 10)
			#(6 14 8 12 10 9 6 7 6 6 10 9 9 10 4 7 11 6 35 35 40 40 20 5 11 7 4 13 11 13 10 7 13 5 10 6 7 7 10 9 10 10 9 8 12 6 11 12 6 6)
			#(12 6 10 12 6 13 7 13 7 12 8 6 12 6 13 5 8 11 6 35 35 40 14 10 6 5 5 6 10 9 13 7 6 12 12 13 8 9 11 14 8 14 9 8 7 6 5 5 9 13)
			#(13 9 10 8 11 13 12 9 12 14 12 12 13 5 14 8 5 5 10 17 35 40 40 17 10 5 10 8 14 7 8 7 10 12 7 14 6 14 11 6 9 6 6 5 6 7 5 8 6 10)
			#(9 10 14 7 10 13 12 13 14 8 6 11 5 8 9 14 9 7 14 20 32 36 40 24 14 7 7 14 6 11 11 12 13 7 5 12 7 8 11 14 11 8 8 10 13 7 13 12 12 13)
			#(14 5 12 5 12 7 8 9 12 13 14 9 9 6 5 6 13 8 16 26 20 40 40 26 16 8 13 5 7 14 14 10 6 14 14 7 9 10 7 8 11 7 9 13 6 6 10 7 12 5)
			#(13 8 13 7 12 10 9 10 7 8 13 12 5 7 14 9 6 7 14 24 20 20 40 40 7 8 7 5 9 13 7 12 12 11 14 10 6 12 6 11 9 14 6 11 6 9 5 10 5 13)
			#(8 14 11 13 5 10 8 13 5 5 7 12 7 14 11 14 9 5 10 17 24 20 40 40 14 16 14 10 6 8 10 8 8 13 9 6 11 7 14 14 6 12 6 7 11 7 11 12 10 11)
			#(6 11 13 8 13 10 10 11 10 8 7 10 12 5 6 12 12 14 6 10 14 20 10 40 40 26 24 17 10 5 12 11 11 10 11 11 9 13 13 12 10 11 6 9 8 8 10 12 7 8)
			#(6 10 14 10 10 10 14 7 13 7 10 14 13 14 11 5 10 5 12 5 7 7 14 24 40 36 32 24 14 7 9 10 14 10 7 14 5 9 8 13 8 10 7 7 12 7 11 10 14 10)
			#(10 12 8 7 12 11 13 9 14 5 7 5 10 14 5 14 7 14 5 9 11 8 16 26 36 40 40 40 16 8 7 6 10 12 12 14 9 9 11 0 6 11 9 13 12 5 11 12 5 6)
			#(8 8 6 9 11 14 6 14 14 12 8 14 6 9 6 8 5 9 12 14 7 7 14 24 32 40 40 40 40 8 7 5 9 12 9 11 8 11 12 6 6 14 9 5 12 14 13 13 5 12)
			#(5 5 11 12 11 9 14 7 5 13 11 8 14 11 13 9 5 9 14 7 14 5 10 17 24 26 35 40 35 35 14 10 6 13 11 5 14 12 10 6 5 8 7 5 13 12 6 11 10 13)
			#(12 10 14 12 5 5 7 7 10 7 13 10 9 5 7 12 14 11 13 6 7 6 6 10 14 5 35 35 35 35 35 17 10 5 9 6 9 7 7 12 12 7 12 6 7 10 12 11 8 13)
			#(5 9 11 8 9 9 10 11 8 6 11 6 6 7 8 12 10 6 7 6 13 8 9 5 7 7 14 35 35 36 35 24 14 7 11 14 10 10 11 6 10 12 14 7 6 7 13 7 12 9)
			#(14 9 14 7 10 13 7 13 10 11 5 13 9 5 8 7 5 14 10 10 8 12 8 8 8 8 16 26 35 35 35 26 16 8 10 7 10 10 11 8 5 12 14 5 5 11 5 6 8 13)
			#(10 9 12 5 5 9 5 12 7 8 9 5 5 8 12 9 10 11 14 12 9 5 7 7 14 7 14 24 35 36 32 24 14 7 14 7 7 10 7 11 13 13 14 7 14 5 12 5 12 9)
			#(14 10 6 5 6 5 10 12 13 11 14 7 8 5 9 13 10 13 7 6 10 10 8 13 12 5 10 17 24 26 24 17 10 5 12 13 9 12 7 14 13 7 11 12 8 11 5 14 6 12)
			#(12 10 8 7 12 8 10 9 11 10 12 9 8 12 14 9 14 14 10 6 10 13 14 7 10 5 6 10 14 16 14 10 6 12 9 13 8 8 12 8 12 10 5 8 6 8 11 14 14 9)
			#(6 8 6 14 11 6 11 13 7 9 13 5 9 10 11 8 8 5 11 5 13 13 14 7 12 8 11 5 7 8 7 5 12 13 8 6 9 14 10 14 7 11 8 5 12 14 5 8 9 9)
			#(11 9 8 11 12 7 8 5 9 9 11 9 13 14 8 13 14 11 12 8 12 8 10 6 6 13 12 14 6 14 12 13 13 9 12 5 7 5 13 8 11 14 10 7 5 11 10 6 10 7)
		); 
		yourself! !!Phase1Samples class methodsFor: 'as yet unclassified'!map4
	"self map4 asMorph openInWindow"
	^self new
		name: 'Map 4';
		extent: 50 @ 50;
		stepTime: 0.1s; "scaled decimal"
		endTime: 60;
		startLocation: 2@2;
		cells: #(
			#(13 5 11 14 11 18 8 11 13 9 18 9 8 8 13 14 15 24 12 24 22 19 21 21 6 19 17 18 18 6 7 19 5 5 19 6 5 8 9 22 13 9 18 12 16 20 24 13 7 10)
			#(8 0 8 15 22 9 21 23 7 7 13 21 10 17 20 11 11 23 6 20 17 19 10 6 23 22 18 23 20 6 6 10 6 17 12 19 23 20 7 15 23 19 5 21 22 20 17 8 6 22)
			#(21 15 16 6 7 8 20 13 11 19 24 22 7 19 17 24 10 7 12 20 23 16 8 7 19 7 11 14 7 8 5 20 12 12 12 5 20 21 15 7 20 14 19 9 6 14 23 6 16 22)
			#(21 19 19 6 13 6 12 10 8 6 10 20 12 22 5 11 16 16 8 23 15 6 15 9 24 20 21 11 21 19 5 16 10 23 20 9 20 13 15 23 20 13 21 20 9 7 16 22 9 22)
			#(18 14 8 11 19 21 6 15 9 19 5 24 23 15 15 23 5 19 10 7 12 8 7 20 18 10 17 7 18 7 13 11 8 23 10 18 14 19 9 8 21 13 17 9 17 11 9 8 16 7)
			#(12 19 21 24 12 24 24 7 14 5 14 20 20 20 24 13 17 16 18 5 23 13 23 8 13 12 16 23 16 10 13 8 5 6 8 11 12 18 23 13 14 7 21 8 8 8 20 5 7 18)
			#(10 23 13 23 7 18 13 16 23 9 13 16 22 18 20 18 7 12 22 24 14 5 11 24 19 13 11 12 18 22 24 13 15 13 23 18 13 12 18 13 7 20 5 21 20 7 17 21 17 7)
			#(22 17 13 14 6 17 14 14 21 15 16 20 13 15 24 13 11 24 20 8 19 14 22 10 10 20 18 6 23 23 10 9 13 13 10 5 21 14 5 20 5 5 16 9 5 6 21 17 8 17)
			#(13 8 17 9 13 11 12 6 6 17 24 22 12 14 13 16 17 9 11 5 6 16 17 5 12 13 23 14 19 19 13 24 17 18 24 14 6 10 21 21 11 15 15 7 13 23 11 24 5 22)
			#(16 16 16 13 20 15 21 8 19 24 6 20 12 8 19 10 7 14 20 23 7 22 12 16 12 21 18 24 10 24 13 13 12 24 8 16 10 23 5 8 10 21 11 10 17 13 19 21 7 20)
			#(17 5 21 5 21 17 17 17 24 24 22 23 7 6 7 10 19 16 20 7 17 8 21 8 13 10 16 19 24 24 18 11 9 24 12 23 24 14 13 12 8 15 20 12 18 18 24 20 12 21)
			#(5 16 12 7 15 21 19 12 19 19 13 13 9 11 11 22 24 9 8 6 15 9 22 5 7 17 13 14 19 20 6 7 15 24 19 16 8 11 20 9 11 9 16 23 9 19 6 15 14 9)
			#(23 16 22 21 16 22 16 6 12 16 24 14 18 20 22 8 16 20 18 5 10 13 23 22 20 15 6 12 23 17 22 14 14 16 22 6 12 10 15 6 21 18 19 22 16 23 8 5 5 11)
			#(21 22 16 11 11 17 24 20 12 15 18 24 10 20 17 5 18 10 23 20 15 17 17 15 6 18 17 5 15 21 12 16 14 21 5 14 7 18 11 21 20 20 19 10 16 15 15 23 9 24)
			#(14 21 7 10 10 20 7 19 15 9 17 20 9 9 8 11 13 20 10 22 13 12 22 5 8 14 24 15 6 9 24 14 8 19 14 21 21 16 6 14 22 14 6 12 8 9 24 20 12 15)
			#(16 17 22 20 8 16 22 14 14 19 24 14 8 21 14 23 18 24 13 15 17 9 24 7 17 15 11 18 18 23 12 11 9 12 14 14 5 17 17 12 14 6 19 21 7 9 9 13 7 22)
			#(17 16 12 13 8 18 16 16 11 19 9 18 19 5 17 17 11 13 6 12 7 23 10 24 11 8 7 23 10 22 23 7 11 22 8 14 13 20 6 24 6 12 11 19 22 24 10 11 10 10)
			#(8 13 22 22 8 14 6 22 19 6 19 13 16 15 5 23 10 7 21 19 23 24 16 14 6 20 5 10 17 7 17 19 21 13 12 12 7 20 24 16 15 10 17 10 5 19 9 14 7 21)
			#(9 22 12 20 10 21 11 18 16 6 12 15 23 23 21 9 7 23 16 11 17 5 14 17 19 23 15 24 13 18 24 12 16 24 7 21 12 15 23 21 5 19 20 15 11 13 12 19 8 13)
			#(21 24 19 18 17 12 13 20 5 17 21 6 16 20 22 13 17 11 14 22 16 14 7 10 22 8 8 11 12 12 12 11 9 11 5 11 22 14 13 15 9 16 5 10 8 24 15 17 20 7)
			#(24 14 17 8 22 21 7 8 15 16 6 16 11 24 7 8 15 17 8 15 12 8 17 14 11 13 15 17 18 18 18 17 15 13 11 9 10 9 22 18 8 7 13 22 24 10 12 12 12 22)
			#(18 23 20 19 18 22 20 18 16 5 13 20 17 19 11 14 22 11 13 12 5 16 20 12 16 19 22 24 25 26 25 24 22 19 16 12 11 10 7 6 11 14 24 19 10 5 9 6 19 9)
			#(7 6 22 11 5 23 19 19 23 15 19 19 11 13 24 24 18 20 10 16 11 13 13 17 21 25 29 32 34 35 34 32 29 25 21 17 13 7 16 17 20 16 18 16 23 16 14 9 19 22)
			#(12 21 10 12 17 16 12 19 19 8 15 15 8 8 9 22 5 6 23 22 17 12 17 22 28 33 38 42 45 46 45 42 38 33 28 22 17 12 12 23 9 21 7 11 24 16 10 7 13 22)
			#(9 17 24 11 9 8 5 18 7 15 11 19 20 7 5 17 19 23 13 19 11 16 21 28 34 41 48 53 56 57 56 53 48 41 34 28 21 16 11 24 23 24 16 14 17 22 12 15 16 20)
			#(6 7 5 20 12 13 16 24 17 5 18 23 18 10 21 13 15 13 16 6 13 19 25 33 41 50 57 63 67 68 67 63 57 50 41 33 25 19 13 16 18 12 10 11 15 18 12 13 22 15)
			#(14 7 24 18 23 12 9 21 11 16 10 11 21 19 24 20 13 19 13 8 15 22 29 38 48 57 66 73 77 79 77 73 66 57 48 38 29 22 15 20 6 12 8 12 14 22 23 18 9 23)
			#(17 16 23 13 8 8 6 6 5 19 16 12 21 9 17 19 15 19 17 11 17 24 32 42 53 63 73 80 85 87 85 80 73 63 53 42 32 24 17 11 16 22 20 14 14 15 16 23 13 15)
			#(11 23 9 17 13 7 20 8 15 21 14 15 12 7 19 17 6 7 22 12 18 25 34 45 56 67 77 85 91 93 91 85 77 67 56 45 34 25 18 12 5 14 8 15 15 12 9 14 18 8)
			#(19 15 23 16 6 10 18 10 20 16 9 5 17 8 15 19 9 16 9 12 18 26 35 46 57 68 79 87 93 94 93 87 79 68 57 46 35 26 18 12 14 6 20 19 16 17 9 23 19 7)
			#(7 6 17 5 18 17 12 23 17 23 13 9 17 14 13 5 18 20 24 12 18 25 34 45 56 67 77 85 91 93 91 85 77 67 56 45 34 25 18 12 12 8 24 5 18 20 13 8 5 17)
			#(9 14 17 6 6 8 14 11 10 9 20 7 12 19 5 17 24 18 6 11 17 24 32 42 53 63 73 80 85 87 85 80 73 63 53 42 32 24 17 11 14 5 16 12 20 20 9 10 23 22)
			#(14 7 8 13 14 22 23 21 16 24 18 18 5 14 13 12 24 14 5 16 15 22 29 38 48 57 66 73 77 79 77 73 66 57 48 38 29 22 15 22 9 22 22 10 9 5 12 23 23 7)
			#(12 20 18 6 20 9 15 7 15 6 21 7 9 16 8 20 16 21 19 16 13 19 25 33 41 50 57 63 67 68 67 63 57 50 41 33 25 19 13 13 16 16 18 10 21 22 13 19 6 16)
			#(23 24 16 5 18 13 7 22 9 9 19 9 5 24 6 14 24 14 8 6 11 16 21 28 34 41 48 53 56 57 56 53 48 41 34 28 21 16 11 16 16 10 8 5 6 20 12 14 20 16)
			#(17 15 20 14 11 14 16 22 5 7 15 23 20 6 5 5 17 13 23 20 5 12 17 22 28 33 38 42 45 46 45 42 38 33 28 22 17 12 23 19 10 24 19 16 22 15 16 7 17 7)
			#(19 6 12 13 24 7 8 8 17 20 24 14 17 22 5 15 21 8 13 13 11 14 13 17 21 25 29 32 34 35 34 32 29 25 21 17 13 10 21 20 11 6 12 10 20 9 18 12 12 19)
			#(21 8 22 20 19 5 11 8 24 8 13 11 18 8 24 11 23 13 15 20 12 8 16 12 16 19 22 24 25 26 25 24 22 19 16 12 13 15 9 15 19 12 6 7 6 7 9 14 14 24)
			#(9 7 19 18 17 9 22 12 6 20 12 7 22 7 21 16 8 5 6 9 5 9 17 24 11 13 15 17 18 18 18 17 15 13 11 20 23 7 20 16 18 6 7 20 5 21 24 21 5 13)
			#(14 22 8 12 16 22 8 21 14 21 6 24 9 16 14 24 15 19 17 22 11 15 12 10 15 13 16 11 12 12 12 11 14 6 18 11 11 7 16 13 10 17 13 14 23 11 6 5 14 22)
			#(16 23 5 7 24 17 14 11 6 12 17 17 24 21 15 10 20 11 15 12 21 20 5 21 19 10 22 21 21 6 12 11 5 10 14 5 19 12 19 21 19 24 12 6 11 21 9 24 12 23)
			#(12 19 12 20 17 5 16 19 5 11 12 13 19 21 13 17 14 12 18 8 10 15 20 22 14 22 6 16 9 24 9 7 19 10 18 9 22 7 12 13 12 16 16 24 19 22 11 18 18 9)
			#(5 8 18 17 5 22 15 9 7 5 15 24 22 7 23 24 6 7 14 19 14 7 12 8 14 12 17 18 6 12 11 9 23 23 16 12 21 23 6 14 5 11 7 9 18 6 8 16 21 5)
			#(13 23 8 16 7 9 6 22 7 17 15 10 5 7 23 17 11 24 15 20 6 5 19 23 12 12 22 20 8 10 8 6 9 24 5 6 24 22 23 19 18 10 11 22 18 13 19 10 9 14)
			#(21 23 6 5 6 20 19 11 24 20 16 10 9 16 16 11 12 11 12 8 15 18 5 14 16 20 7 15 21 11 9 14 12 12 18 5 14 12 23 20 10 22 24 20 8 23 18 18 9 19)
			#(15 16 24 6 9 20 19 19 11 17 15 17 11 18 17 14 21 23 17 18 19 11 5 12 7 12 12 14 14 17 17 20 20 10 7 9 11 12 9 19 13 12 8 15 11 22 15 7 22 23)
			#(17 11 15 23 16 6 15 10 6 20 10 20 16 8 5 9 23 21 7 6 9 11 17 15 10 6 14 24 5 16 16 8 7 7 11 18 19 9 12 13 6 21 18 23 18 23 13 13 7 9)
			#(5 20 10 19 14 20 23 24 11 24 12 13 24 19 12 7 12 9 8 21 22 22 17 10 7 21 24 17 10 15 21 13 10 19 6 14 23 12 14 12 7 16 11 15 24 22 16 15 11 13)
			#(8 24 13 15 11 17 17 21 12 14 7 14 8 7 14 21 10 19 7 23 9 22 22 14 20 21 20 11 21 23 17 15 14 12 10 7 8 24 11 8 12 19 18 5 5 13 10 22 12 21)
			#(19 18 8 7 15 20 23 9 21 18 18 17 24 19 19 9 8 16 16 18 19 18 16 17 21 6 17 12 5 21 5 22 15 7 23 24 11 19 15 13 20 9 9 23 11 14 13 19 12 16)
		);
		yourself! !!Phase1Samples class methodsFor: 'examples'!map1
	"self map1 asMorph openInWindow"
	^self new
		name: 'Map 1';
		extent: 20 @ 20;
		stepTime: 0.1s; "scaled decimal"
		endTime: 20.0s; "scaled decimal"
		startLocation: 2@3;
		cells: #(
			#(19 16 4 29 48 95 96 23 35 47 0 22 80 30 70 3 31 49 93 89)
			#(51 62 47 74 70 17 21 78 57 89 52 0 20 58 47 3 4 87 84 22)
			#(37 STT 88 17 46 31 7 26 77 87 40 90 92 45 65 85 91 53 32 11)
			#(26 45 19 62 2 18 13 80 84 79 19 94 10 8 67 51 36 59 64 81)
			#(54 15 0 83 65 67 24 70 13 95 91 30 1 12 29 4 89 97 64 72)
			#(46 18 68 94 38 11 50 2 53 7 20 90 55 39 68 35 57 39 3 55)
			#(18 3 20 45 34 53 46 50 18 66 40 91 37 46 37 53 87 25 79 3)
			#(80 18 38 96 97 55 98 49 89 94 11 12 4 47 53 41 58 24 19 63)
			#(34 72 75 2 5 85 35 97 86 48 56 79 93 54 54 0 31 23 3 6)
			#(19 37 75 52 87 42 25 70 60 37 56 75 18 28 61 45 90 94 25 6)
			#(43 25 64 8 76 41 17 3 16 80 14 53 46 89 73 79 84 99 63 55)
			#(67 6 55 56 3 37 58 85 49 96 51 26 75 63 14 25 6 20 76 25)
			#(25 67 80 3 53 93 36 75 80 10 47 52 47 50 34 38 99 48 80 15)
			#(19 73 57 23 40 51 16 40 41 3 89 29 67 53 43 69 35 72 93 28)
			#(47 50 36 25 4 85 50 86 88 16 83 58 32 10 48 58 5 50 42 7)
			#(11 46 9 36 98 28 78 15 96 67 92 4 30 66 35 21 31 2 98 60)
			#(0 14 22 6 53 99 19 74 73 42 64 72 43 96 16 88 86 53 84 83)
			#(48 97 49 52 49 87 10 45 60 86 38 29 73 85 40 70 89 71 23 16)
			#(3 99 89 35 0 33 72 96 65 59 31 48 48 47 1 93 6 93 39 1)
			#(30 97 73 57 99 58 17 32 88 87 77 49 29 38 16 5 86 32 41 13)
		); 
		yourself! !!Phase1Samples class methodsFor: 'examples'!mapSmallGrid
	"self mapSmall asMorph openInWorld"
	^self new
		name: 'Small Map Grid';
		extent: 3 @ 4;
		stepTime: 0.1s; "scaled decimal"
		endTime: 1.5s;
		startLocation: 2@2;
		cells: #(
			#(11 21 31)
			#(12 22 32)
			#(13 23 33)
			#(14 24 34)
			);
		yourself! !!Phase1Samples class methodsFor: 'examples'!map3
	"self map3 asMorph openInWindow"
	^self new
		name: 'Map 3';
		extent: 50 @ 50;
		stepTime: 0.1s; "scaled decimal"
		endTime: 60.0s; "scaled decimal"
		startLocation: 20@20;
		cells: #(
			#(00 02 04 06 08 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98)
			#(21 13 19 23 13 18 15 28 17 29 18 10 24 20 29 18 28 23 28 15 29 11 15 20 26 23 18 29 13 16 20 13 17 27 22 10 14 12 10 14 12 18 18 28 23 11 26 28 19 16)
			#(29 25 58 62 65 68 71 72 73 74 73 72 71 68 65 62 11 18 21 17 19 13 10 24 29 16 16 19 11 15 21 24 26 24 19 14 18 15 15 13 13 18 10 28 19 15 16 11 12 22)
			#(19 28 62 66 70 73 75 77 78 79 78 77 75 73 70 66 28 27 29 23 23 22 15 21 11 16 22 18 25 11 24 19 26 27 27 16 29 27 10 21 13 29 20 17 18 17 15 19 18 12)
			#(28 27 65 70 73 77 80 82 83 83 83 82 80 77 73 70 15 21 23 23 22 12 19 24 27 11 28 28 26 18 12 25 28 10 27 19 16 18 27 22 29 27 13 28 29 21 19 14 20 18)
			#(25 19 68 73 77 80 83 85 87 87 87 85 83 80 77 73 16 13 24 28 23 23 21 10 11 16 27 28 14 13 17 21 12 25 23 13 18 28 13 16 12 24 15 13 24 10 19 24 23 20)
			#(15 12 71 75 80 83 86 89 90 90 90 89 86 83 80 75 18 16 25 20 27 22 27 18 20 17 17 26 22 19 26 12 12 11 24 26 20 29 23 20 24 25 25 13 24 20 17 14 27 23)
			#(12 20 72 77 82 85 89 91 92 93 92 91 89 85 82 77 20 11 24 23 11 19 29 23 24 24 29 16 22 26 27 26 18 21 14 23 15 28 10 19 14 27 21 26 16 10 14 13 16 27)
			#(22 22 73 78 83 87 90 92 94 94 94 92 90 87 83 78 28 23 10 25 14 15 16 22 13 15 18 16 16 19 13 24 22 18 24 11 27 16 27 19 22 13 14 21 15 28 28 19 14 19)
			#(20 12 74 79 83 87 90 93 94 94 94 93 90 87 83 79 19 24 11 25 26 25 15 15 28 28 10 26 20 21 11 21 10 15 23 12 20 19 24 11 27 24 28 20 28 22 29 28 12 18)
			#(11 16 73 78 83 87 90 92 94 94 94 92 90 87 83 78 14 13 27 24 22 24 23 28 23 19 25 21 21 12 18 21 18 10 19 26 11 28 24 27 29 14 14 29 29 27 24 24 16 20)
			#(21 12 72 77 82 85 89 91 92 93 92 91 89 85 82 77 27 18 28 29 19 26 13 14 13 22 29 26 28 23 18 15 19 27 19 25 19 12 10 21 21 21 24 27 14 20 23 17 26 11)
			#(11 28 71 75 80 83 86 89 90 90 90 89 86 83 80 75 21 17 28 24 22 12 25 11 22 14 12 25 12 26 11 21 25 10 10 16 28 10 17 15 29 16 19 23 27 19 28 17 28 24)
			#(29 10 68 73 77 80 83 85 87 87 87 85 83 80 77 73 14 27 24 15 19 20 21 27 24 26 17 22 23 19 10 18 26 17 18 10 14 16 12 19 12 10 22 17 11 17 16 12 14 10)
			#(26 15 65 70 73 77 80 82 83 83 83 82 80 77 73 70 24 25 17 11 22 29 16 28 24 28 19 12 25 10 26 14 20 20 28 26 23 20 17 22 15 17 13 20 28 15 20 24 13 20)
			#(29 14 62 66 70 73 75 77 78 79 78 77 75 73 70 66 19 26 19 20 18 24 22 28 24 11 22 19 15 27 28 13 26 28 23 24 18 23 27 25 15 13 17 19 14 15 26 23 12 23)
			#(16 14 19 22 27 27 17 20 21 26 25 15 12 13 14 11 15 13 26 26 13 23 22 14 15 12 12 13 29 24 19 25 29 12 26 11 17 19 12 20 20 29 17 11 18 13 16 24 29 28)
			#(11 25 16 27 26 14 11 10 12 14 10 19 26 27 15 24 21 19 11 27 10 28 13 15 20 14 11 21 13 15 12 10 17 27 13 21 16 21 15 20 16 27 28 27 22 23 14 24 28 25)
			#(27 10 22 25 26 26 29 13 11 22 14 29 10 15 11 14 11 28 21 27 26 16 10 28 20 19 14 14 28 22 10 17 11 23 19 24 16 13 11 13 10 18 19 28 13 26 10 24 10 12)
			#(12 21 18 25 13 11 21 12 22 22 24 12 27 11 20 24 14 14 15 0 10 10 26 29 21 24 29 27 28 22 21 13 12 16 11 21 24 19 26 29 21 22 21 15 28 29 15 10 22 15)
			#(26 21 24 29 11 22 17 24 20 22 14 20 12 14 23 23 24 16 28 25 21 10 24 15 24 22 13 25 14 29 26 20 17 12 15 22 28 16 22 26 22 14 23 14 18 25 28 22 17 12)
			#(23 29 26 15 27 23 21 28 25 26 26 26 27 16 24 27 22 10 28 22 10 27 11 19 15 24 23 24 27 20 20 26 16 29 20 24 11 11 13 17 20 13 20 13 11 26 24 20 11 10)
			#(11 10 23 11 12 14 27 26 17 17 22 15 29 11 26 17 24 20 18 25 12 24 13 22 11 27 11 20 25 16 11 12 16 27 21 11 16 26 12 14 19 14 16 27 25 17 28 17 26 10)
			#(25 29 20 20 21 29 27 21 18 21 19 19 27 23 15 11 23 22 14 29 28 12 14 24 15 26 23 18 13 26 10 28 28 23 16 26 15 14 12 11 21 17 23 29 11 18 14 24 10 16)
			#(27 11 15 24 12 27 14 24 27 23 16 28 20 17 12 17 19 22 28 23 11 10 24 26 11 18 17 15 26 12 27 25 26 21 12 17 18 18 18 24 11 17 29 29 17 12 24 13 27 21)
			#(29 25 28 22 28 11 28 19 25 29 27 22 18 29 17 11 23 20 18 12 29 21 21 13 29 11 27 28 15 14 21 22 13 18 11 27 13 12 26 22 14 20 28 10 29 11 16 21 13 22)
			#(27 14 21 24 10 16 22 29 24 22 14 26 10 20 20 18 22 25 15 23 29 14 13 28 12 12 11 18 24 29 10 19 10 23 23 27 21 23 27 29 11 21 13 25 17 17 11 12 15 20)
			#(26 12 12 26 24 19 16 17 29 12 21 13 16 23 10 12 23 28 28 25 11 19 10 29 28 22 16 12 24 27 28 12 24 18 26 25 19 17 14 22 20 15 13 11 13 25 14 29 29 14)
			#(10 27 15 16 11 27 14 23 16 22 18 16 29 16 12 18 24 11 11 25 10 13 26 15 21 12 19 24 25 27 28 22 20 20 28 28 27 19 28 21 22 27 26 24 23 28 14 19 23 25)
			#(14 14 23 16 20 24 26 18 18 19 15 13 20 20 12 20 18 22 14 18 16 25 16 27 14 15 27 23 13 20 24 26 19 19 23 28 17 13 18 23 27 20 19 18 26 20 27 23 29 24)
			#(11 14 26 19 12 12 26 16 18 17 28 15 23 26 22 29 19 12 18 27 25 21 23 20 11 14 24 21 17 15 25 22 22 17 25 19 27 13 16 19 21 21 18 20 10 18 17 24 12 17)
			#(19 27 22 18 16 25 10 19 13 18 20 11 16 16 16 21 27 19 17 17 22 23 15 26 11 10 14 20 14 21 17 13 17 23 25 23 19 17 12 27 12 13 19 10 15 20 16 14 20 28)
			#(20 16 17 21 27 25 11 25 24 16 20 27 26 18 11 23 28 23 23 15 23 22 18 13 11 18 28 21 23 13 13 21 20 22 14 12 18 10 28 18 15 20 23 19 24 14 29 10 11 10)
			#(20 15 13 20 10 24 20 21 21 29 25 19 10 21 24 27 21 17 24 21 15 14 10 16 18 19 21 28 25 14 16 19 16 14 12 11 20 15 21 27 24 28 28 25 19 28 20 14 16 24)
			#(23 19 11 24 14 16 14 24 13 16 23 26 11 10 28 25 21 28 13 18 27 17 16 10 26 27 19 14 11 11 13 18 24 23 27 22 21 14 19 17 17 21 24 21 29 22 19 23 13 11)
			#(14 17 19 28 16 13 13 18 11 28 10 18 18 29 22 22 12 24 24 20 14 26 15 12 28 27 26 15 20 12 23 15 22 12 27 21 12 23 27 19 17 23 11 26 15 29 10 12 10 28)
			#(28 12 26 22 24 22 21 16 22 14 13 21 21 22 14 23 15 28 20 27 14 28 20 14 26 10 12 26 13 13 29 14 25 10 10 29 24 18 17 11 23 15 20 21 26 25 19 19 24 25)
			#(19 12 28 23 15 24 13 20 23 13 26 13 12 24 10 22 18 25 11 21 12 14 19 15 16 20 16 22 11 22 13 15 11 24 20 12 22 27 28 13 24 21 24 25 15 11 10 10 25 23)
			#(24 29 15 23 22 28 19 26 20 19 20 24 11 23 17 28 23 23 16 12 29 13 21 13 13 16 24 14 17 13 29 22 10 25 19 28 20 26 21 17 27 15 21 29 24 13 19 11 13 22)
			#(10 21 24 11 12 25 10 18 25 19 14 17 11 22 11 27 23 12 10 19 29 29 12 20 11 27 23 11 10 21 18 22 22 28 20 17 22 12 15 27 27 15 17 22 15 21 16 28 14 21)
			#(28 24 16 29 11 23 16 20 28 26 17 23 26 12 12 22 17 23 22 22 10 13 25 15 18 10 11 21 12 20 17 28 14 24 18 11 11 25 15 25 16 26 27 23 17 11 20 20 23 21)
			#(25 17 28 13 19 14 19 20 13 16 10 29 28 12 24 25 11 28 12 15 28 23 28 21 10 28 10 18 10 28 29 21 26 26 13 18 21 21 12 25 18 11 28 22 24 21 29 29 23 24)
			#(17 11 13 13 23 25 23 25 12 24 19 11 22 12 13 16 16 18 23 12 10 15 27 12 26 11 21 24 25 24 24 22 17 29 13 19 24 25 25 26 19 16 20 18 13 20 11 14 17 13)
			#(21 28 22 13 22 21 19 19 11 26 13 21 12 22 22 26 20 25 14 15 12 20 10 28 17 19 23 20 19 23 14 21 15 28 28 25 21 19 25 27 16 27 21 17 19 22 14 23 28 10)
			#(21 13 28 22 27 26 25 16 23 25 18 16 23 27 25 25 29 15 26 23 15 14 28 22 16 28 24 19 22 11 22 16 19 16 23 20 21 24 11 10 22 27 12 17 26 20 14 12 26 10)
			#(19 23 11 23 25 17 15 24 10 23 24 26 25 22 15 13 16 18 23 28 12 14 17 23 20 19 10 22 20 26 16 25 28 24 18 26 11 26 15 26 13 16 19 20 19 13 28 14 22 22)
			#(22 23 27 17 25 15 24 16 29 25 18 16 28 17 15 20 21 13 14 17 16 25 26 15 24 24 22 25 19 20 13 16 13 19 14 19 17 14 21 22 21 22 13 11 10 14 12 25 13 19)
			#(19 14 15 13 26 29 20 19 13 12 19 14 29 21 24 12 20 23 12 15 13 29 27 16 18 25 29 16 22 24 12 13 12 20 29 19 13 11 22 27 15 22 14 27 22 11 10 12 11 27)
			#(20 26 10 21 10 10 23 29 19 28 27 24 27 11 17 17 10 23 24 16 28 10 10 29 16 24 28 26 13 27 26 26 21 24 18 16 25 14 28 18 23 13 17 11 23 27 19 29 29 24)
			#(14 17 21 22 12 11 19 19 17 12 21 15 25 29 26 13 11 17 10 11 11 11 25 19 28 16 19 14 21 28 26 18 17 29 14 26 19 21 22 28 12 28 18 15 16 10 11 18 11 14)
		);
		yourself! !!Phase1Samples class methodsFor: 'examples'!map2
	"self map2 asMorph openInWindow"
	^self new
		name: 'Map 2';
		extent: 50 @ 50;
		stepTime: 0.1s; "scaled decimal"
		endTime: 10.0s; "scaled decimal"
		startLocation: 20@20;
		cells: #(
			#(5 6 17 29 14 15 18 25 26 23 23 28 23 25 17 26 23 21 22 20 19 14 29 24 13 17 22 11 13 24 28 10 21 28 20 9 16 6 24 27 29 14 5 16 22 7 27 23 22 10)
			#(23 8 10 7 15 20 5 24 9 25 6 20 29 19 20 17 18 27 12 27 26 13 28 23 5 5 5 17 15 20 7 16 8 5 14 12 28 15 24 21 12 12 27 19 27 5 9 20 29 9)
			#(26 23 6 10 27 20 6 28 24 23 22 19 28 21 28 20 16 20 29 21 15 7 24 12 14 19 13 23 25 6 14 8 21 28 29 22 16 19 29 11 23 22 5 11 11 9 20 5 10 22)
			#(18 8 16 7 7 15 23 22 12 22 20 26 26 14 11 21 7 16 24 16 20 9 10 28 29 6 28 28 20 23 9 9 11 19 5 17 13 14 16 10 14 21 13 26 6 7 22 11 29 16)
			#(19 13 12 27 8 18 13 13 5 26 29 13 28 25 24 19 23 9 22 11 12 16 28 17 11 18 8 7 10 20 7 22 21 14 29 10 13 8 8 22 9 19 29 24 7 24 5 13 22 26)
			#(21 25 19 12 27 19 19 24 17 9 15 17 21 6 8 29 14 24 19 21 29 12 5 25 14 26 10 20 14 28 29 7 26 29 9 28 6 5 15 29 6 27 17 29 16 7 10 19 11 13)
			#(16 10 14 7 16 18 26 19 6 24 29 16 20 16 10 25 15 10 19 19 25 29 28 22 27 14 21 22 7 27 16 13 24 18 10 28 14 28 7 28 21 6 22 20 16 21 18 10 15 9)
			#(29 14 26 10 6 19 23 23 11 22 7 7 21 13 26 14 23 28 5 11 20 29 7 6 7 5 16 12 19 29 9 24 9 19 19 8 8 16 14 23 7 15 7 24 21 20 6 22 29 14)
			#(8 15 19 10 27 7 14 6 10 23 18 7 27 13 26 25 29 17 19 16 16 17 21 25 17 10 19 15 26 23 16 24 14 9 10 29 24 23 16 27 15 7 14 9 14 12 24 22 16 7)
			#(9 10 5 23 28 10 25 13 10 16 18 18 22 29 10 18 10 16 28 23 17 24 18 15 16 24 22 29 17 18 7 28 12 15 26 22 28 11 6 10 24 8 12 23 5 21 21 19 8 7)
			#(21 11 25 9 21 26 7 11 25 20 12 22 8 12 28 18 27 11 27 5 14 23 9 13 10 5 12 27 12 16 29 7 28 21 17 14 9 28 15 11 21 10 24 26 14 11 14 7 21 28)
			#(12 6 11 5 16 25 9 29 29 25 21 6 6 12 18 10 9 21 15 22 12 20 22 27 7 25 11 28 11 18 21 5 24 15 17 6 19 23 7 15 15 25 14 25 26 15 25 23 16 7)
			#(7 20 21 6 8 9 26 29 24 22 5 17 18 19 7 24 29 27 8 27 24 29 11 5 14 12 21 7 20 20 26 15 22 11 18 10 8 15 17 22 7 10 15 26 5 6 28 16 24 23)
			#(21 7 25 21 23 7 14 12 27 12 8 15 22 8 5 26 29 10 17 11 7 16 9 15 10 25 10 20 29 28 19 13 27 15 20 23 7 25 19 8 8 27 12 26 20 12 5 11 6 13)
			#(21 17 25 20 27 6 20 13 28 24 9 22 5 12 8 6 17 17 8 6 12 16 29 16 25 23 28 26 26 5 27 27 10 29 18 28 23 14 13 29 5 12 27 13 28 16 7 9 19 18)
			#(20 5 13 14 20 6 20 26 13 13 15 8 15 18 13 24 29 7 24 14 10 29 7 17 24 16 19 23 26 16 27 8 9 12 23 20 23 16 11 25 13 10 18 10 23 7 25 25 5 6)
			#(16 16 23 8 15 9 24 9 12 13 20 5 7 13 6 12 7 26 13 12 11 24 27 20 29 9 5 14 9 6 11 24 28 16 16 10 22 19 16 10 8 5 24 7 28 6 24 26 29 11)
			#(20 9 24 28 29 22 15 28 7 26 20 14 28 16 11 13 16 16 14 12 25 12 28 15 11 15 20 29 26 11 6 21 21 12 15 26 6 13 5 19 28 16 29 8 17 6 15 27 23 17)
			#(17 27 20 11 22 6 10 26 11 7 15 26 8 26 16 23 10 24 10 26 25 19 10 29 8 14 13 15 28 10 11 8 17 17 25 7 15 13 17 14 16 16 23 28 9 6 13 8 17 19)
			#(27 17 29 22 14 12 27 28 9 6 18 24 12 20 7 7 17 14 24 0 15 18 12 15 19 29 19 8 17 12 21 27 21 23 9 26 20 17 29 20 7 8 16 20 24 5 27 27 29 22)
			#(11 14 27 15 25 18 12 15 6 21 15 29 19 18 23 14 17 15 14 22 21 15 17 10 27 24 24 19 24 8 10 16 17 13 9 14 14 15 17 19 19 10 10 24 10 19 6 7 26 12)
			#(8 9 17 14 10 14 7 11 26 22 26 27 5 12 29 25 22 29 9 9 20 9 18 29 22 26 17 12 15 8 5 21 21 10 25 26 7 24 23 27 18 7 17 27 17 12 7 26 27 29)
			#(26 6 16 20 19 7 14 27 21 9 5 19 22 5 16 22 10 19 7 15 8 7 29 7 21 17 12 23 26 16 14 10 9 5 14 19 6 6 26 15 19 12 13 16 27 24 20 22 25 23)
			#(18 29 6 12 20 12 29 5 5 24 20 21 7 9 14 11 12 12 6 13 11 29 14 22 13 12 14 28 29 21 24 15 15 15 24 13 25 27 28 21 5 8 21 28 11 12 10 6 25 25)
			#(14 7 12 28 29 24 17 24 24 24 19 10 25 22 18 20 26 19 28 6 14 12 24 16 6 12 11 10 15 8 19 11 13 12 8 21 6 27 11 9 25 12 13 11 15 8 14 7 21 29)
			#(19 27 12 7 16 19 9 7 28 20 23 9 19 19 27 10 14 28 13 11 12 17 7 24 29 15 21 6 29 16 20 17 29 28 5 14 15 18 19 19 15 29 11 12 8 23 28 24 12 16)
			#(16 23 11 28 29 18 13 27 8 19 16 8 5 19 25 16 17 13 5 13 16 23 13 21 6 28 11 18 8 29 24 26 17 24 15 15 6 19 6 6 22 17 22 28 28 16 22 5 28 22)
			#(10 9 12 22 25 12 5 17 27 23 6 7 21 11 17 9 18 28 5 9 25 12 26 16 14 21 19 26 19 15 22 17 19 23 13 19 13 11 13 22 13 25 21 5 6 8 28 9 7 26)
			#(27 10 9 14 13 15 6 28 7 24 24 19 10 26 5 18 24 28 28 23 8 21 18 16 16 8 9 17 23 28 23 6 11 10 23 5 21 16 27 9 24 12 7 25 16 6 13 8 29 24)
			#(6 15 19 23 10 12 22 26 18 26 26 20 28 23 12 26 28 21 14 22 16 23 20 19 7 6 8 27 15 19 25 16 9 13 25 6 27 21 13 18 18 5 22 11 17 16 18 25 27 27)
			#(25 6 8 24 10 26 10 10 23 29 16 21 9 11 16 27 18 14 6 25 28 5 26 24 18 21 24 13 15 18 17 24 19 23 10 22 19 12 6 28 12 12 20 13 28 24 5 25 10 13)
			#(23 11 25 17 26 23 5 11 23 19 20 14 27 5 29 7 19 11 8 27 9 5 14 18 28 25 19 28 12 18 27 7 15 15 6 9 26 9 28 22 26 16 26 8 8 26 10 29 27 16)
			#(21 10 13 6 29 22 19 14 29 27 9 25 5 27 6 24 7 11 19 22 6 18 5 6 19 25 28 19 28 20 17 27 23 25 18 20 26 14 16 14 5 19 16 9 10 27 25 22 6 22)
			#(14 9 9 12 10 24 18 10 22 15 9 18 25 25 9 24 21 8 7 24 14 9 15 21 18 5 5 19 16 13 14 12 9 22 16 29 21 16 7 24 17 19 25 16 27 11 8 20 16 19)
			#(5 13 10 27 20 28 26 24 25 10 12 22 22 26 29 8 13 17 13 17 15 14 29 28 14 18 12 22 25 14 21 25 28 29 5 20 16 15 20 14 11 10 22 25 18 9 17 17 21 6)
			#(8 15 25 23 16 22 16 24 11 28 15 21 6 5 28 27 18 24 14 17 16 27 8 24 7 19 11 16 12 15 15 25 12 7 17 11 9 27 25 21 21 14 16 22 19 27 13 29 5 8)
			#(5 10 6 20 28 10 10 18 13 28 11 19 27 23 19 16 6 27 20 23 28 25 11 11 9 25 14 14 17 9 19 29 22 18 20 12 15 7 8 23 10 22 10 15 22 12 25 19 16 17)
			#(12 20 11 21 27 6 7 24 19 25 19 12 16 14 29 28 29 25 15 15 14 13 24 19 24 25 25 17 17 7 19 29 24 11 25 8 23 8 24 13 20 12 27 21 11 18 23 12 6 10)
			#(14 9 12 6 9 7 18 15 29 12 12 9 11 28 7 21 13 9 17 8 24 16 28 28 29 16 25 13 25 26 12 9 24 15 16 21 8 17 12 10 12 17 20 16 5 9 24 19 11 12)
			#(11 22 7 23 27 22 11 6 7 10 6 28 10 27 27 19 15 18 9 19 17 10 23 25 24 23 13 11 8 9 6 27 15 17 29 12 25 29 18 5 23 24 26 24 28 19 9 21 6 11)
			#(13 6 15 28 29 14 14 15 22 12 29 17 22 21 16 22 19 22 6 29 16 17 22 17 14 6 17 15 10 5 8 11 10 11 29 6 11 15 21 26 7 10 6 20 15 20 5 19 17 23)
			#(23 11 27 11 29 17 28 9 23 5 29 29 26 10 27 22 11 8 21 14 21 24 14 19 6 7 5 8 23 12 22 16 10 27 25 26 22 20 6 29 28 23 21 11 14 27 23 28 11 19)
			#(15 27 18 9 14 27 26 19 16 20 17 21 24 26 24 27 25 17 20 28 19 9 11 10 28 5 15 22 6 7 29 25 11 16 6 10 27 29 12 5 19 12 22 22 14 24 16 28 24 19)
			#(22 12 5 6 10 17 15 12 18 14 27 25 28 26 13 17 27 25 10 29 7 26 28 24 26 23 8 8 8 10 27 22 20 21 10 7 19 27 25 28 5 16 13 28 9 23 27 27 14 7)
			#(13 14 8 10 17 16 20 8 13 5 20 16 18 23 13 11 20 11 27 25 11 10 23 6 8 8 29 29 21 6 22 11 20 11 11 27 6 26 10 16 8 29 22 10 7 21 23 20 12 24)
			#(7 25 5 22 16 25 18 20 13 26 21 27 22 28 23 17 16 17 17 8 29 25 9 25 20 29 28 26 17 26 25 5 27 10 8 28 11 13 9 22 18 13 6 20 18 14 24 5 24 17)
			#(26 6 6 15 26 14 27 6 10 22 10 20 29 22 26 22 21 22 11 15 19 24 12 21 12 16 14 11 22 29 17 23 29 6 18 12 18 13 15 8 16 29 14 5 21 12 24 15 25 6)
			#(5 13 26 23 11 21 13 18 19 5 6 28 20 28 7 7 7 11 20 10 16 27 28 24 26 13 18 10 5 7 12 19 21 6 24 17 6 13 27 14 22 9 13 14 13 9 21 11 15 21)
			#(24 23 27 11 5 12 5 10 27 13 28 6 23 22 11 14 12 12 16 13 22 20 11 6 18 12 29 27 10 17 14 14 23 28 12 20 13 17 10 12 23 7 25 27 13 21 26 23 10 19)
			#(10 5 11 7 21 22 27 26 28 12 25 21 25 13 13 6 12 10 21 15 20 5 21 10 10 13 14 21 24 8 29 10 21 9 8 23 23 17 22 21 14 15 15 23 7 5 12 7 19 19)
		);		
		yourself! !!Phase1Samples class methodsFor: 'examples'!mapCodedLocations
	"self mapCodedLocations asMorph openInWorld"
	^self new
		name: 'Small Map';
		extent: 3 @ 4;
		stepTime: 0.1s; "scaled decimal"
		endTime: 20.0s;
		startLocation: 2@3;
		cells: #(
			#(11 21 31)
			#(12 22 32)
			#(13 23 33)
			#(14 24 34)
			);
		yourself! !Object subclass: #RobotDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotDirection methodsFor: 'searching'!keyPress! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotDirection class
	instanceVariableNames: 'soleInstance'!!RobotDirection class methodsFor: 'searching'!allDirections
	^ self subclasses collect: [ :class | class soleInstance ]! !!RobotDirection class methodsFor: 'searching' stamp: 'BenComan 12/28/2019 01:58'!soleInstance 
	^ soleInstance ifNil: [ soleInstance := self basicNew initialize] ! !!RobotDirection class methodsFor: 'searching'!directionForKeypress: key
	^ self allDirections detect: [ :cls | cls keyPress = key lowercase] ifNone: [ RobotDirectionUnknown soleInstance ]! !!RobotDirection class methodsFor: 'instance creation'!new 
	self error: 'Each RobotDirection is a singleton -- send #soleInstance instead'! !!RobotDirection class methodsFor: 'instance creation'!wrap: aPoint extent: extent
	|newX newY| 
	newX := aPoint x + self movement x.	
	newY := aPoint y + self movement y.

	"Normalize point i.e. edges of map wrap around"
	newX < 1 ifTrue: [ newX := extent x ].
	newY < 1 ifTrue: [ newY := extent y ].
	
	newX > extent x ifTrue: [ newX := 1 ].
	newY > extent y ifTrue: [ newY := 1 ].
	
	^newX@newY! !!RobotDirection class methodsFor: 'as yet unclassified'!allDirectionMovements
	self shouldBeImplemented.! !Object subclass: #RobotDirectionError
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotDirectionError methodsFor: 'mapping'!keyPress! !!RobotDirectionError methodsFor: 'mapping'!movement 
	^ 0 @ 0! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotDirectionError class
	instanceVariableNames: 'soleInstance'!!RobotDirectionError class methodsFor: 'accessing' stamp: 'BenComan 12/28/2019 01:58'!soleInstance 
	^ soleInstance ifNil: [ soleInstance := self basicNew initialize ] ! !Object subclass: #RobotDirectionUnknown
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotDirectionUnknown methodsFor: 'mapping'!keyPress! !!RobotDirectionUnknown methodsFor: 'mapping'!movement 
	^ 0 @ 0! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotDirectionUnknown class
	instanceVariableNames: 'soleInstance'!!RobotDirectionUnknown class methodsFor: 'accessing' stamp: 'BenComan 12/28/2019 01:58'!soleInstance 
	^ soleInstance ifNil: [ soleInstance := self basicNew initialize ] ! !RobotDirection subclass: #RobotEast
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotEast methodsFor: 'as yet unclassified'!opposite
	^RobotWest soleInstance! !!RobotEast methodsFor: 'as yet unclassified'!character
	^$E! !!RobotEast methodsFor: 'mapping'!keyPress
	^$d! !!RobotEast methodsFor: 'mapping'!movement 
	^ 1 @ 0! !Model subclass: #RobotMap
	instanceVariableNames: 'name extent cells startLocations robots time stepTime endTime finishFlag debugState mapProcess mapProcessStep runContinuous'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotMap methodsFor: 'initialize-release'!initialize

	time := 0.0s. "scaled decimal"
	finishFlag := false.
	stepTime := 0.1s. "scaled decimal"
	robots := OrderedCollection new.
	mapProcessStep := Semaphore new.
	runContinuous := false
! !!RobotMap methodsFor: 'initialize-release'!extent: aPoint
	extent := aPoint.
	cells := (1 to: aPoint y) collect: [:each | Array new: aPoint x withAll: nil]! !!RobotMap methodsFor: 'announcements'!announce: anAnnouncement 
	self announcer announce: anAnnouncement ! !!RobotMap methodsFor: 'copying'!scannedCopy
	^self shallowCopy postCopyByScanner! !!RobotMap methodsFor: 'copying'!postCopy
	^self
		basicCells: (cells collect: [:cell| cell copy basicMap: self ]);
		basicRobots: (robots collect: [:robot | robot copy basicMap: self]);
		yourself! !!RobotMap methodsFor: 'as yet unclassified'!debug: aBoolean 
	debugState := aBoolean! !!RobotMap methodsFor: 'as yet unclassified'!wrapVectorFrom: fromPoint to: toPoint 
	|dx dy|
	"Get the shortest vector between two points wrapped around the edges
	Mirror the toPoint one map in each direction and get its distance to the fromPoint.
	 Sort by absolute value so the closest is first." 
	dx := ( toPoint x + { 0 . self extent x . self extent x negated } - fromPoint x) sorted: [ :a :b | a abs < b abs ].
	dy := ( toPoint y + { 0 . self extent y . self extent y negated } - fromPoint y) sorted: [ :a :b | a abs < b abs ].

	^dx first @ dy first! !!RobotMap methodsFor: 'as yet unclassified'!stepKey: aCharacter silently: silently 
	robots do: [ :robot | robot move: (RobotDirection directionForKeypress: aCharacter) ].
	silently ifFalse: [ self updateMap ].! !!RobotMap methodsFor: 'as yet unclassified'!basicCells: aCollection 
	cells := aCollection! !!RobotMap methodsFor: 'as yet unclassified'!removeRobot: aRobot 
	robots remove: aRobot! !!RobotMap methodsFor: 'as yet unclassified'!runProcessLoop
	|debugRealTimeStarted debugRealTimeStopped|
	mapProcess ifNotNil: [ mapProcess terminate ].
	mapProcessStep consumeAllSignals.
	
	debugRealTimeStarted := Time now. 
	"Transcript cr; crShow: 'Real Time Started: '; show: debugRealTimeStarted."

	mapProcess := 
		[	[	self isFinished ifTrue: [ 
					runContinuous := false. "In case stepped back, then forward, don't want to race to completion "
					debugRealTimeStopped := Time now. 
					"Transcript crShow: 'Real Time Stopped: '; show: debugRealTimeStopped.
					Transcript crShow: 'Real Time Elapsed: '; show: debugRealTimeStopped asSeconds - debugRealTimeStarted asSeconds."
					mapProcess terminate.
			].
				mapProcessStep wait.
				self announce: (RobotMapStep copyMap: self).
				
				"With multiple robots, the following may take too long to be in main UI loop,
				hence we are running in our  own process. This has no impact on display."
				robots do: [ :robot | robot determineDirectionWithin: stepTime seconds ].
				
				"The following executes quickly and impacts display, so defer to UI loop."
				WorldState defer: [ 	
					robots do: [ :robot | robot move ].
					self updateMap.
					runContinuous ifTrue: [ mapProcessStep signal ].
				].
			] repeat	
		] newProcess priority: 35; name: 'RobotWorld'.
	mapProcess resume. 
	! !!RobotMap methodsFor: 'as yet unclassified'!debug
	^ debugState = true! !!RobotMap methodsFor: 'as yet unclassified'!startLocation: aPoint 
	startLocations := { aPoint }! !!RobotMap methodsFor: 'as yet unclassified'!startLocations: pointCollection 
	startLocations := pointCollection! !!RobotMap methodsFor: 'as yet unclassified'!terminate
	robots do: [ :robot| robot terminate ].
	mapProcess ifNotNil: [ mapProcess terminate ].! !!RobotMap methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 03:32'!updateMap
	|locations nonGhostRobots |
	time >= endTime ifTrue: [ ^self ].
	nonGhostRobots := robots reject: #ghost.
	nonGhostRobots do: [ :robot | (self cellAt: robot location) actOn: robot ].
	locations := (nonGhostRobots collect: #location) asBag.
	nonGhostRobots do: [ :robot | robot energyAdd: 
			(self cellAt: robot location) energy / (locations occurrencesOf: robot location) ].
	locations do: [ :location | (self cellAt: location) energy: 0 ].
	time := time + stepTime.
! !!RobotMap methodsFor: 'as yet unclassified' stamp: 'BenComan 12/30/2019 10:56'!configureRobots: mindClass 
	|id|
	id := $A.
	startLocations do: [ :location | 
		self cellAt: location put: (StartCell newForMap: self  location: location def: nil).
		robots add: (Robot 
			configureId: id  
			map: self  
			location: location  
			mindClass: mindClass).
		id := (id asInteger + 1) asCharacter
		]! !!RobotMap methodsFor: 'as yet unclassified'!postCopyCells
	cells := cells collect: [:row | row collect: [:cell| cell copy]]
! !!RobotMap methodsFor: 'as yet unclassified'!postCopyByScanner
	announcer := nil.
	mapProcess := nil.
	mapProcessStep := nil.
	stepTime := stepTime copy.
	endTime := endTime copy.
	time := time copy.
	cells := cells collect: [:cell| cell copy].
	robots := robots collect: [:robot| robot copyMindlessForMap: self ].	
! !!RobotMap methodsFor: 'as yet unclassified'!restore: aMap
	cells := aMap cells collect: [ :cell | cell copy basicMap: self ].
	time := aMap time.
	finishFlag := aMap finishFlag.
	robots := aMap robots collect: [ :robot | robot copy basicMap: self ] 
	! !!RobotMap methodsFor: 'as yet unclassified'!basicRobots: robotCollection 
	robots := robotCollection! !!RobotMap methodsFor: 'as yet unclassified'!start
	runContinuous := true.
	self step! !!RobotMap methodsFor: 'as yet unclassified'!stop
	runContinuous := false.! !!RobotMap methodsFor: 'as yet unclassified'!finishFlag
	^ finishFlag! !!RobotMap methodsFor: 'as yet unclassified'!robotsDo: aBlockClosure 
	robots do: aBlockClosure! !!RobotMap methodsFor: 'as yet unclassified'!stepBack: previousMapStep 
	cells :=      previousMapStep map cells.
	time :=       previousMapStep map time.
	finishFlag := previousMapStep map finishFlag.
	robots :=     previousMapStep map robots.! !!RobotMap methodsFor: 'as yet unclassified'!basicRobot: robotCollection 
	self halt.
	robots := robotCollection! !!RobotMap methodsFor: 'as yet unclassified'!stepTime: aScaleDecimal 
	stepTime := aScaleDecimal! !!RobotMap methodsFor: 'as yet unclassified'!cellsDo: aBlockClosure 
	cells do: aBlockClosure! !!RobotMap methodsFor: 'as yet unclassified'!start: aPoint 
	startLocations := { aPoint }! !!RobotMap methodsFor: 'as yet unclassified'!postCopyMindlessRobots
	robots := robots collect: [:robot| robot copyMindlessForMap: self ]! !!RobotMap methodsFor: 'enumerating'!cellLocationsDo: aBlock

	1 to: extent x do: [:column |
		1 to: extent y do: [:row |
			aBlock value: column @ row value: (self at: column @ row)]]! !!RobotMap methodsFor: 'actions'!robotsAllDead
	robots detect: [ :robot | robot isDead not ] ifNone: [ ^true ].
	^false! !!RobotMap methodsFor: 'actions'!markFinished

	finishFlag := true! !!RobotMap methodsFor: 'actions'!isFinished

	^finishFlag
		or: [self time >= self endTime
		or: [ self robotsAllDead ]]! !!RobotMap methodsFor: 'running' stamp: 'BenComan 12/29/2019 03:33'!scoreFile: aFilename

	| file |
	file := aFilename asFileName readStream.
	[file atEnd] whileFalse: [
		| direction |
		file upTo: $*.
		direction := OpalCompiler evaluate: (file upTo: Character cr) trimSeparators.
		self robot move: direction ].
	file close.
	^self robot energy! !!RobotMap methodsFor: 'running'!step
	(mapProcess isNil or: [ mapProcess isTerminated ]) ifTrue: [ self runProcessLoop ].
	mapProcessStep signal.
! !!RobotMap methodsFor: 'setup'!placeRobot: aRobot
	self shouldNotImplement.
	self robot: aRobot! !!RobotMap methodsFor: 'UI'!asMorph 
	^RobotWorldMorph newWith: self! !!RobotMap methodsFor: 'instance creation' stamp: 'BenComan 12/29/2019 03:38'!newRobotAt: aPoint 
	(self cellAt: aPoint) energy: 0.
	^ robots add: (Robot newForMap: self location: aPoint)! !!RobotMap methodsFor: 'printing'!storeOn: aStream
self halt.
	aStream
		nextPutAll: self class name;
		nextPutAll: ' new'; cr;
		tab; tab; nextPutAll: 'name: ', self name printString, ';'; cr;
		tab; tab; nextPutAll: 'size: ', self size printString, ';'; cr;
		tab; tab; nextPutAll: 'endTime: ', endTime printString, ';'; cr;
		tab; tab; nextPutAll: 'cells: #('; cr.

	self cells do: [:row |
		aStream tab; tab; tab; store: row; cr].

	aStream tab nextPutAll: '); ';
	tab; tab; nextPutAll: 'placeRobot: ', robots storeString; cr;
	tab; tab; nextPutAll: 'yourself'! !!RobotMap methodsFor: 'printing'!printOn: aStream
	aStream
		nextPutAll: self class name;
		nextPutAll: self name printString;
		nextPutAll: '(';
		nextPutAll: time printString;
		nextPutAll: ')'! !!RobotMap methodsFor: 'testing'!hasRobotAt: aPoint

	robots ifEmpty: [^false].
	^robots detect: [:robot| robot isAt: aPoint] ifFound: [ true ] ifNone: [ false ]! !!RobotMap methodsFor: 'accessing'!extent

	^extent! !!RobotMap methodsFor: 'accessing'!cellAt: aPoint

	| normalizedPoint |
	normalizedPoint := self normalizePoint: aPoint.

	^cells at: (normalizedPoint x)@(normalizedPoint y)! !!RobotMap methodsFor: 'accessing'!name: anObject

	name := anObject! !!RobotMap methodsFor: 'accessing'!endTime: anObject

	endTime := anObject! !!RobotMap methodsFor: 'accessing'!height
	^extent y! !!RobotMap methodsFor: 'accessing'!cells

	^cells! !!RobotMap methodsFor: 'accessing'!robot: anObject
self halt.
	robots := anObject.
	robots ifNotNil: [robots map: self]! !!RobotMap methodsFor: 'accessing'!robots 
	^robots! !!RobotMap methodsFor: 'accessing'!time

	^time! !!RobotMap methodsFor: 'accessing'!endTime

	^endTime! !!RobotMap methodsFor: 'accessing'!time: anObject

	time := anObject! !!RobotMap methodsFor: 'accessing'!width
	^extent x! !!RobotMap methodsFor: 'accessing'!normalizePoint: aPoint

	^(aPoint x - 1 \\ extent x + 1) @ (aPoint y - 1 \\ extent y + 1)! !!RobotMap methodsFor: 'accessing'!name

	^name! !!RobotMap methodsFor: 'accessing'!cells: array2D
	|maxX maxY|
	cells := Dictionary new.
	array2D withIndexCollect: [ :row :y| 
		maxY := y.
		row withIndexCollect: [ :cellDef :x | |newCell|
			maxX := x.
			newCell := cellDef mapCellClass newForMap: self  location: x@y  def: cellDef.
			cells at: x@y put: newCell  
		]
	].
	"default size to simplify tests"
	extent ifNil: [ extent := maxX @ maxY ]! !!RobotMap methodsFor: 'accessing'!cellAt: aPoint put: value

	| normalizedPoint |
	normalizedPoint := self normalizePoint: aPoint.

	^cells at: normalizedPoint put: value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotMap class
	instanceVariableNames: ''!!RobotMap class methodsFor: 'as yet unclassified'!allMaps
	^ self allSubclasses flatCollect: [ :subclass |
		subclass class selectors collect: [ :selector |
			subclass perform: selector ] ]! !!RobotMap class methodsFor: 'instance creation'!new

	^super new initialize! !!RobotMap class methodsFor: 'instance creation'!readFrom: aFilename

	| file result |
	file := aFilename asFileName readStream.
	[result := OpalCompiler evaluate: file contents]
		ensure: [file close].
	^result! !!RobotMap class methodsFor: 'instance creation' stamp: 'BenComan 12/30/2019 01:57'!initialize 
	"The order of classes in the fileout may define Phase1Samples before RobotMap exists, 
	 so this is a hack to ensure Phase1Samples ends up in the right location in the hierarcy"
	RobotMap subclass: #Phase1Samples
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'JRMPC-Phase1-Samples'! !!RobotMap class methodsFor: 'instance creation'!size: aPoint

	^self new
		size: aPoint;
		yourself! !Model subclass: #RobotMapCell
	instanceVariableNames: 'map location'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotMapCell methodsFor: 'as yet unclassified'!actOn: aRobot 
	"Default is to do nothing"! !!RobotMapCell methodsFor: 'announce'!announce: anAnnouncement 
	map ifNotNil: [ map announce: anAnnouncement ]! !!RobotMapCell methodsFor: 'accessing'!location
	^ location! !!RobotMapCell methodsFor: 'accessing'!info 
	^ location printString! !!RobotMapCell methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:36'!energy 
	^0! !!RobotMapCell methodsFor: 'accessing'!printOn: aStream
	aStream print: location! !!RobotMapCell methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:36'!energy: dummy
	"Most cells don't have a energy to change. Default do nothing"! !!RobotMapCell methodsFor: 'initialization'!basicMap: aMap
	map := aMap! !!RobotMapCell methodsFor: 'initialization'!initializeMap: aMap location: aPoint 
	map := aMap.
	location := aPoint! !!RobotMapCell methodsFor: 'initialization'!map 
	^map! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotMapCell class
	instanceVariableNames: ''!!RobotMapCell class methodsFor: 'instance creation' stamp: 'BenComan 12/30/2019 10:54'!newForMap: aMap location: aPoint def: dummy 
	^ self new
		initializeMap: aMap location: aPoint! !RobotMapCell subclass: #EnergyCell
	instanceVariableNames: 'energy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!EnergyCell methodsFor: 'UI' stamp: 'BenComan 12/29/2019 03:28'!visit: aRobotWorldMorph drawOn: aCanvas
	aRobotWorldMorph drawEnergyCell: self on: aCanvas! !!EnergyCell methodsFor: 'UI' stamp: 'BenComan 12/29/2019 03:24'!energyColor
	energy > 100.0 ifTrue: [ ^Color yellow ].
	energy < -100.0 ifTrue: [ ^Color blue].
	energy < -100.0 ifTrue: [ ^Color white].
	energy < 0 ifTrue: [^Color r: 1.0  - (energy negated / 100.0) g: 1.0  - (energy negated / 100.0) b: 1.0].
	^Color r: 1.0 g: 1.0  - (energy / 100.0) b: 1.0  - (energy / 100.0)
	! !!EnergyCell methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:38'!energy: anInteger 
	energy := anInteger.
! !!EnergyCell methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:23'!energy 
	^energy! !!EnergyCell methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:23'!initializeEnergy: anInteger 
	energy := anInteger! !!EnergyCell methodsFor: 'initialization' stamp: 'BenComan 12/29/2019 03:22'!info 
	^super info, ' energy ' , energy printString! !!EnergyCell methodsFor: 'public interface' stamp: 'BenComan 12/29/2019 03:26'!actOn: robot 
	robot energyAdd: energy.
	energy := 0.
! !!EnergyCell methodsFor: 'printing' stamp: 'BenComan 12/29/2019 03:22'!printOn: aStream
	super printOn: aStream.
	aStream nextPutAll: '=', energy printString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnergyCell class
	instanceVariableNames: ''!!EnergyCell class methodsFor: 'instance creation' stamp: 'BenComan 12/29/2019 03:23'!newForMap: aMap location: aPoint def: anInteger 
	^ self new 
		initializeMap: aMap location: aPoint;
		initializeEnergy: anInteger! !!EnergyCell class methodsFor: 'instance creation' stamp: 'BenComan 12/29/2019 03:39'!newFromInteger: anInteger 
	^self new energy: anInteger! !!EnergyCell class methodsFor: 'accessing'!symbol
	^nil! !!EnergyCell class methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:35'!energy: anInteger 
	^ self new energy: anInteger! !RobotMapCell subclass: #Robot
	instanceVariableNames: 'name mind energy isDead mindClass mindProcess stepSemaphore mindProcessStep timedOut direction debug ghost id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!Robot methodsFor: 'moving'!move
	self isDead ifTrue: [^self].
	location := map normalizePoint: location + self direction movement.! !!Robot methodsFor: 'moving'!info
	^ super info, ' ROBOT'! !!Robot methodsFor: 'moving'!moveRight

	location := self navigator right location.
	self claimCell! !!Robot methodsFor: 'moving'!moveDown

	location := self navigator down location.
	self claimCell! !!Robot methodsFor: 'moving'!moveLeft

	location := self navigator left location.
	self claimCell! !!Robot methodsFor: 'moving'!moveUp

	location := self navigator up location.
	self claimCell! !!Robot methodsFor: 'moving' stamp: 'BenComan 12/29/2019 03:40'!claimCell

	energy := energy + (self map claimCell: location).
	self hasDied ifTrue: [self markDead].! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 23:09'!mindClasses
	^ RobotMind allSubclasses! !!Robot methodsFor: 'as yet unclassified'!basicMap: aMap 
	map := aMap! !!Robot methodsFor: 'as yet unclassified'!wrappedVectorTo: aPoint 
	^ map wrapVectorFrom: location to: aPoint.! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/28/2019 23:39'!id
	^ id! !!Robot methodsFor: 'as yet unclassified'!postCopyByScanners
	mind := nil.
	mindProcess := nil.
	stepSemaphore := nil.
	dependents := nil.
	map := map scannedCopy
	! !!Robot methodsFor: 'as yet unclassified'!copyMindlessForMap: aMap
	^ self shallowCopy postCopyMindlessForMap: aMap
		! !!Robot methodsFor: 'as yet unclassified'!postCopyMindlessForMap: aMap
	map := aMap.
	mindProcess := nil.
	mindClass := nil.
	mind := nil.
	! !!Robot methodsFor: 'as yet unclassified'!ghost: aBoolean
	ghost := aBoolean = true! !!Robot methodsFor: 'as yet unclassified'!location: aPoint 
	location := aPoint! !!Robot methodsFor: 'as yet unclassified'!terminate
	mindProcess ifNotNil: [ mindProcess terminate ]! !!Robot methodsFor: 'as yet unclassified'!name
	^ name! !!Robot methodsFor: 'as yet unclassified'!name: aString
	name := aString! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 02:40'!determineDirectionWithin: aDuration 
	|sketchRobot|
	sketchRobot := self scan.
	
	self debug 
		ifTrue: [ self mindDoOneCycle: sketchRobot ]
		ifFalse: 
		[	[ self mindDoOneCycle: sketchRobot ] valueWithin: aDuration onTimeout: [ timedOut := true ]
		].

	"Validate value returned from competition code"
	(mind direction isKindOf: RobotDirection)
		ifTrue:  [ direction := mind direction ]
		ifFalse: [ direction := RobotDirectionError soleInstance ]! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 18:12'!mindDoOneCycle: sensorData
	"These are the three entrypoints for competition entries" 
	debug ifTrue: [self halt].

	mind ifNil: [ 
		mind := mindClass new setupOn: sensorData ]. 

	"timedOut := true" "set manually for testing"
	timedOut ifTrue: [ 
		timedOut := false. 
		mind recoverOn: sensorData ].
	
	mind determineDirectionForRobot: sensorData. 
! !!Robot methodsFor: 'as yet unclassified'!ghost
	^ghost! !!Robot methodsFor: 'as yet unclassified'!resumeAndStep
	"A timeout may cause a Mind Process may be suspended part way through a computation.
	 The following arrangement allows that to be resumed cleanly and continue on for one more step."
	stepSemaphore initSignals.
	mindProcess resume.
	stepSemaphore signal! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/28/2019 23:35'!initializeId: anIdCharacter map: aMap location: aPoint mindClass: aMindClass 
	id := anIdCharacter. 
	mindClass := aMindClass.
	map := aMap.
	location := aPoint.! !!Robot methodsFor: 'as yet unclassified'!scannedCopy
	^ self shallowCopy postCopyByScanners! !!Robot methodsFor: 'as yet unclassified'!move: aDirection
	direction := aDirection.
	self move.! !!Robot methodsFor: 'as yet unclassified'!scan
	|mapCopy|
	mapCopy := map scannedCopy. 
	^ mapCopy robots detect: [ :robot | robot name = self name ].! !!Robot methodsFor: 'as yet unclassified'!ifAlive: aBlockClosure 
	isDead ifFalse: aBlockClosure  ! !!Robot methodsFor: 'as yet unclassified' stamp: 'BenComan 12/31/2019 01:32'!move: aRobotDirection silently: silently 
	self move: aRobotDirection.
	silently ifFalse: [ map updateMap ]
	! !!Robot methodsFor: 'as yet unclassified'!suspend
	mindProcess ifNotNil: [ mindProcess suspend ]! !!Robot methodsFor: 'as yet unclassified'!fourNeighbors
	^ location fourNeighbors collect: [ :point | map cellAt: (map normalizePoint: point) ].
! !!Robot methodsFor: 'printing'!storeOn: aStream

	aStream
		nextPut: $(;
		nextPutAll: self class name;
		nextPutAll: ' new location: ', self location storeString;
		nextPutAll: '; yourself)'! !!Robot methodsFor: 'testing'!isDead

	^isDead! !!Robot methodsFor: 'testing'!isAt: aPoint

	^location = aPoint! !!Robot methodsFor: 'accessing'!debug: aBoolean 
	debug := aBoolean = true! !!Robot methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:38'!energyAdd: anInteger 
	anInteger = 0 ifFalse: [ 
		energy := energy + anInteger.
		"self inform: 'Robot energy ' , energy printString" ]! !!Robot methodsFor: 'accessing'!markDead

	isDead := true! !!Robot methodsFor: 'accessing'!debug 
	^ debug! !!Robot methodsFor: 'accessing'!direction

	^direction! !!Robot methodsFor: 'accessing'!direction: aDirection

	direction := aDirection! !!Robot methodsFor: 'accessing'!mind

	^mind! !!Robot methodsFor: 'accessing'!isSetup

	^mind isSetup! !!Robot methodsFor: 'accessing'!map

	^map! !!Robot methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:31'!energy

	^energy! !!Robot methodsFor: 'accessing'!map: anObject

	map := anObject.
	map at: self location put: 0! !!Robot methodsFor: 'accessing' stamp: 'BenComan 12/30/2019 00:24'!mindClass: aMindClass
	mind := nil.
	mindClass := aMindClass! !!Robot methodsFor: 'accessing'!printOn: aStream
	name printOn: aStream.
	super printOn: aStream.
	aStream nextPut:
		((mind isNil or: [mind direction isNil]) ifTrue: [ $- ] ifFalse: [ mind direction character ]) 
! !!Robot methodsFor: 'accessing'!mindClass

	^mindClass ifNil: [ mindClass := HorizontalScanningMind ]! !!Robot methodsFor: 'accessing' stamp: 'BenComan 12/29/2019 03:31'!energy: anObject

	energy := anObject! !!Robot methodsFor: 'accessing'!robots
	^{self}! !!Robot methodsFor: 'accessing'!mind: aMind

	mind := aMind.! !!Robot methodsFor: 'initialize-release' stamp: 'BenComan 12/29/2019 03:31'!initialize

	location := 0@0.
	energy := 0.
	isDead := false.
	debug := false.
	ghost := false.
	stepSemaphore := Semaphore new.
	name := 'Robot-TeamName'.
	timedOut := false.
	mindProcessStep := Semaphore new.! !!Robot methodsFor: 'running'!setup
	self halt. "should not get here"
	self isSetup ifTrue: [^self].
	mind isNil ifTrue: [mind := self mindClass new].
	self mind setupOn: self.
! !!Robot methodsFor: 'running'!navigator
self halt.
	^self navigatorClass new
		location: location;
		map: map;
		yourself! !!Robot methodsFor: 'running' stamp: 'BenComan 12/29/2019 03:31'!hasDied

	^energy < 0 or: [(map at: location) = #(die)]! !!Robot methodsFor: 'visiting'!visit: aRobotWorldMorph drawOn: aCanvas
	aRobotWorldMorph drawRobot: self on: aCanvas! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Robot class
	instanceVariableNames: ''!!Robot class methodsFor: 'instance creation'!new

	^super new initialize! !!Robot class methodsFor: 'instance creation'!newForMap: aMap location: aPoint 
	^ self new initializeMap: aMap location: aPoint! !!Robot class methodsFor: 'instance creation'!symbol 
	^nil! !!Robot class methodsFor: 'as yet unclassified'!configureMindClass: aClass map: aMap location: aPoint 
	^ self new initializeMindClass: aClass map: aMap location: aPoint ! !!Robot class methodsFor: 'as yet unclassified' stamp: 'BenComan 12/28/2019 23:34'!configureId: id map: aMap location: aPoint mindClass: aMindClass 
	^ self new initializeId: id map: aMap location: aPoint mindClass: aMindClass  ! !Announcement subclass: #RobotMapEndTime
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotMapEndTime methodsFor: 'initialization'!initialize 
	time := Time now.! !!RobotMapEndTime methodsFor: 'initialization'!endTime
	^ time! !Announcement subclass: #RobotMapStep
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotMapStep methodsFor: 'as yet unclassified'!gtDisplaySpotterMorphOn: aComposite
	<gtInspectorPresentationOrder: 0>
	
	aComposite morph 
		title: 'Morph';
		display: [map asMorph]! !!RobotMapStep methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 03:37'!energy
	^ map robots first energy! !!RobotMapStep methodsFor: 'as yet unclassified'!map: aMap
	map := aMap! !!RobotMapStep methodsFor: 'as yet unclassified'!copyMap: aMap
	map := aMap copy! !!RobotMapStep methodsFor: 'as yet unclassified'!map 
	^ map! !!RobotMapStep methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 03:37'!printOn: aStream
	super printOn: aStream.
	aStream 
		nextPutAll: '[';
		print: self time;
		nextPutAll: ', ';
		print: self energy;
		nextPutAll: ']'! !!RobotMapStep methodsFor: 'as yet unclassified'!time
	^ map time.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotMapStep class
	instanceVariableNames: ''!!RobotMapStep class methodsFor: 'as yet unclassified'!copyMap: aMap 
	^ self new copyMap: aMap! !!RobotMapStep class methodsFor: 'as yet unclassified'!withMap: aMap
	^ self new map: aMap! !RobotDirection subclass: #RobotNorth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotNorth methodsFor: 'as yet unclassified'!opposite
	^RobotSouth soleInstance! !!RobotNorth methodsFor: 'mapping'!keyPress
	^$w! !!RobotNorth methodsFor: 'mapping'!movement 
	^ 0 @ -1! !!RobotNorth methodsFor: 'mapping'!character 
	^$N! !RobotDirection subclass: #RobotSouth
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotSouth methodsFor: 'as yet unclassified'!opposite
	^RobotNorth soleInstance! !!RobotSouth methodsFor: 'mapping'!keyPress
	^$s! !!RobotSouth methodsFor: 'mapping'!movement 
	^ 0 @ 1! !!RobotSouth methodsFor: 'mapping'!character 
	^$S! !RobotDirection subclass: #RobotWest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!RobotWest methodsFor: 'as yet unclassified'!opposite
	^RobotEast soleInstance! !!RobotWest methodsFor: 'mapping'!keyPress
	^$a! !!RobotWest methodsFor: 'mapping'!movement 
	^ -1 @ 0! !!RobotWest methodsFor: 'mapping'!character 
	^$W! !RobotMapCell subclass: #StartCell
	instanceVariableNames: 'score'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Core'!!StartCell methodsFor: 'as yet unclassified' stamp: 'BenComan 12/29/2019 03:36'!energy: anInteger 
	"do nothing"! !!StartCell methodsFor: 'visiting'!visit: aRobotWorldMorph drawOn: aCanvas
	aRobotWorldMorph drawStartCell: self on: aCanvas! !!StartCell methodsFor: 'visiting'!info 
	^ super info, ' START'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StartCell class
	instanceVariableNames: ''!!StartCell class methodsFor: 'as yet unclassified'!symbol
	^#STT! !RobotMap initialize!Object subclass: #RobotMind
	instanceVariableNames: 'direction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!!RobotMind methodsFor: 'running'!recoverOn: sketchRobot
	"COMPETITION ENTRIES _MAY_ OVERRIDE THIS METHOD.
	 If the mind doesn't complete its step within the designated time, its process is terminated.
	 Depending on how you manage your data objects, they may end up corrupted.
	 This method allows the mind to reset and continue playing.
 	 'sketchRobot' is a copy of the world as seen by the robot's scanners 
	"

	self setupOn: sketchRobot! !!RobotMind methodsFor: 'running'!initialize 
	"COMPETITION ENTRIES _MAY_ OVERRIDE THIS METHOD.
	 This method is not part of the competition API, but a standard part of Pharo
	 called when objects are instatiated."
	super initialize! !!RobotMind methodsFor: 'running'!setupOn: sketchRobot
	"COMPETITION ENTRIES _MAY_ OVERRIDE THIS METHOD.
	 This method facilitates initial setup of the mind related to the map parameters.
	 It is called once by the competition framework when the mind is instantiated.
 	 'sketchRobot' is a copy of the world as seen by the robot's scanners 
	"
! !!RobotMind methodsFor: 'running'!determineDirectionForRobot: sketchRobot
	"COMPETITION ENTRIES _MUST_ OVERRIDE THIS METHOD.
	 This method is the main entrypoint for competition entries.
	 It is called each time the game world progresses one step in time.
	 'sketchRobot' is a copy of the map/robots as seen by a robot's scanners (i.e. no internal state). 
	 Each time step provides a new independent scan 'sketchRobot'.
	 The mind instance remains constant across steps (i.e. it has memory across time steps).  
	 The actual map/robots remain inaccessible to prevent accidental corruption of the game.
	"
! !!RobotMind methodsFor: 'running'!direction
	"COMPETITION ENTRIES _MUST_NOT_ OVERRIDE THIS METHOD
	 This method is how the game later reads the mind's decision
	"
	
	"self assert: (direction isKindOf: RobotDirection)."
	^ direction! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RobotMind class
	instanceVariableNames: ''!!RobotMind class methodsFor: 'instance creation'!new
	"Answer a newly created and initialized instance."

	^super basicNew initialize! !!RobotMind class methodsFor: 'identification'!teamName

	^'Team name not provided'! !RobotMind subclass: #BestNeighborMind
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!!BestNeighborMind methodsFor: 'competition-api' stamp: 'BenComan 12/29/2019 03:27'!determineDirectionForRobot: robot

	| bestNeighbors bestMovement |
	bestNeighbors := robot fourNeighbors sorted: [ :cellA :cellB | cellA energy > cellB energy ].
	bestMovement := robot wrappedVectorTo: bestNeighbors first location.
	direction := RobotDirection allDirections detect: [ :dir| dir movement = bestMovement ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BestNeighborMind class
	instanceVariableNames: ''!!BestNeighborMind class methodsFor: 'identification'!teamName

	^'Competition Organizer'! !RobotMind subclass: #HorizontalScanningMind
	instanceVariableNames: 'stepsToNextRow'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!!HorizontalScanningMind methodsFor: 'accessing'!stepsToNextRow: anObject

	stepsToNextRow := anObject! !!HorizontalScanningMind methodsFor: 'accessing'!stepsToNextRow

	^stepsToNextRow! !!HorizontalScanningMind methodsFor: 'competition-api'!determineDirectionForRobot: aRobot
	"This is the competition interface point"
	stepsToNextRow := (stepsToNextRow + 1) \\ (aRobot map extent x + 1).
	direction := 
		(stepsToNextRow = 0)
			ifTrue:  [RobotSouth soleInstance]
			ifFalse: [RobotEast  soleInstance]! !!HorizontalScanningMind methodsFor: 'competition-api'!setupOn: aRobot

	stepsToNextRow := aRobot map extent y + 1.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HorizontalScanningMind class
	instanceVariableNames: ''!!HorizontalScanningMind class methodsFor: 'identification'!teamName

	^'Competition Organizer'! !RobotMind subclass: #ImprovedRandomWalkMind
	instanceVariableNames: 'random lastDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!!ImprovedRandomWalkMind methodsFor: 'accessing'!random: anObject

	random := anObject! !!ImprovedRandomWalkMind methodsFor: 'accessing'!random

	^random! !!ImprovedRandomWalkMind methodsFor: 'initialize-release'!initialize
	super initialize.
	random := Random new! !!ImprovedRandomWalkMind methodsFor: 'competition-api'!determineDirectionForRobot: aRobot

	| directions opposite |
	opposite := lastDirection ifNotNil: [ lastDirection opposite ]. 
	directions := RobotDirection allDirections copyWithout: opposite.
	direction := directions at: (random next * directions size) truncated + 1.
	lastDirection := direction! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ImprovedRandomWalkMind class
	instanceVariableNames: ''!!ImprovedRandomWalkMind class methodsFor: 'identification'!teamName

	^'Competition Organizer'! !RobotMind subclass: #RandomWalkMind
	instanceVariableNames: 'random'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!!RandomWalkMind methodsFor: 'initialize-release'!initialize
	super initialize.
	random := Random new! !!RandomWalkMind methodsFor: 'as yet unclassified'!determineDirectionForRobot: robot 
	"I ignore the scanned 'robot' and move randomly."
	| directions |
	directions := RobotDirection allDirections.
	direction := directions at: (random next * directions size) truncated + 1.! !!RandomWalkMind methodsFor: 'accessing'!random: anObject

	random := anObject! !!RandomWalkMind methodsFor: 'accessing'!random

	^random! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RandomWalkMind class
	instanceVariableNames: ''!!RandomWalkMind class methodsFor: 'identification'!teamName

	^'Competition Organizer'! !RobotMind subclass: #MyTeamMind
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Minds'!PackageManifest subclass: #ManifestJRMPCPhase
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'JRMPC-Phase1-Manifest'!!ManifestJRMPCPhase commentStamp: '' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestJRMPCPhase class
	instanceVariableNames: ''!!ManifestJRMPCPhase class methodsFor: 'code-critics'!ruleRBBadMessageRuleV1FalsePositive
	^ #(#(#(#RGMethodDefinition #(#Robot #determineDirectionWithin: #false)) #'2019-12-24T19:54:51.508749+08:00') )! !'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 31 December 2019 at 3:25:39.492169 am'!!Array methodsFor: '*JRMPC-Phase1'!mapCellClass
	^ RobotMapCell subclasses detect: [ :cls | cls symbol = self first ].
! !'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 31 December 2019 at 3:25:39.493169 am'!!ByteSymbol methodsFor: '*JRMPC-Phase1-Core'!mapCellClass
	^ RobotMapCell subclasses detect: [ :cls | cls symbol = self ].
! !'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 31 December 2019 at 3:25:39.494169 am'!!Point methodsFor: '*JRMPC-Phase1'!between: min and: max 
	"Answer whether the receiver is less than or equal to the argument, max, 
	and greater than or equal to the argument, min."

	^self >= min and: [self <= max]! !'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 31 December 2019 at 3:25:39.494169 am'!!SmallInteger methodsFor: '*JRMPC-Phase1' stamp: 'BenComan 12/29/2019 03:21'!mapCellClass
	^EnergyCell! !'From Pharo7.0.4 of 13 August 2019 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)] on 31 December 2019 at 3:25:39.495169 am'!!Context methodsFor: '*JRMPC-Phase1' stamp: 'BenComan 12/29/2019 03:07' prior: 21596709!runUntilErrorOrReturnFrom: aSender 
	"BTC.2019.12.19 HOTFIXED TO PROPERLY STEP OVER HALT, IN ADVANCE OF BACKPORT FROM PHARO-8 FIX"
	
	"ASSUMES aSender is a sender of self.  Execute self's stack until aSender returns or an unhandled exception is raised.  Return a pair containing the new top context and a possibly nil exception.  The exception is not nil if it was raised before aSender returned and it was not handled.  The exception is returned rather than openning the debugger, giving the caller the choice of how to handle it."
	"Self is run by jumping directly to it (the active process abandons thisContext and executes self).  However, before jumping to self we insert an ensure block under aSender that jumps back to thisContext when evaluated.  We also insert an exception handler under aSender that jumps back to thisContext when an unhandled exception is raised.  In either case, the inserted ensure and exception handler are removed once control jumps back to thisContext."

	| error context here topContext |
	here := thisContext.

	"Insert ensure and exception handler contexts under aSender"
	error := nil.
	context := aSender insertSender: (Context
		contextOn: Error, Halt do: [:ex |
			error ifNil: [
				"this is ugly but it fixes the side-effects of not sending an Unhandled error on Halt"
				error := ex.
				topContext := thisContext.
				ex resumeUnchecked: here jump ]
			ifNotNil: [ ex pass ]]).
	context := context insertSender: (Context
		contextEnsure: [error ifNil: [
				topContext := thisContext.
				here jump]
		]).
	self jump.  "Control jumps to self"

	"Control resumes here once above ensure block or exception handler is executed"
	^ error ifNil: [
		"No error was raised, remove ensure context by stepping until popped"
		[(context isDead)or: [ topContext isNil  ]] whileFalse: [topContext := topContext stepToCallee].
		{topContext. nil}

	] ifNotNil: [
		"Error was raised, remove inserted above contexts then return signaler context"
		aSender terminateTo: context sender.  "remove above ensure and handler contexts"
		{topContext. error}
	].
! !----End fileIn----!!RobotMind methodsFor: 'running' stamp: 'BenTran 1/29/2020 15:19' prior: 33659846!initialize 
	"COMPETITION ENTRIES _MAY_ OVERRIDE THIS METHOD.
	 This method is not part of the competition API, but a standard part of Pharo
	 called when objects are instatiated."	doesYellowSquareExist := false.   didCheckForYellowSquare := false.
	super initialize! !!RobotMind methodsFor: 'running' stamp: 'BenTran 1/29/2020 15:19' prior: 33660440!determineDirectionForRobot: sketchRobot    "COMPETITION ENTRIES _MUST_ OVERRIDE THIS METHOD.     This method is the main entrypoint for competition entries.     It is called each time the game world progresses one step in time.     'sketchRobot' is a copy of the map/robots as seen by a robot's scanners (i.e. no internal state).      Each time step provides a new independent scan 'sketchRobot'.     The mind instance remains constant across steps (i.e. it has memory across time steps).       The actual map/robots remain inaccessible to prevent accidental corruption of the game.    "    "| bestNeighbors bestMovement |    bestNeighbors := sketchRobot fourNeighbors sorted: [ :cellA :cellB | cellA energy > cellB energy ].    bestMovement := sketchRobot wrappedVectorTo: bestNeighbors first location.    direction := RobotDirection allDirections detect: [ :dir| dir movement = bestMovement ]."        "direction := RobotEast soleInstance."        |width height|. "initilize the variable"    didCheckForYellowSquare ifFalse: [        width := sketchRobot map width.        height := sketchRobot map height.        1 to: height do:[ "for loop"            :y | "assigns itterator number to i"             1 to: width do:[                :x |                            (((sketchRobot map cellAt: x@y) energy) > 999) "the x@y signifies a point object ex: (1,1) or (5,99)"                ifTrue: [                     Transcript show: 'yellow square with value: '.                    Transcript show: ((sketchRobot  map cellAt: x@y) energy).                    Transcript cr.                    doesYellowSquareExist := true.                 ].            ].        ].    didCheckForYellowSquare := true.    ].        direction := RobotSouth soleInstance ! !